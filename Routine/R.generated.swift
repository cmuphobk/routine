//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Foros-Bold`.
    static let forosBold = Rswift.FontResource(fontName: "Foros-Bold")
    /// Font `Foros-Medium`.
    static let forosMedium = Rswift.FontResource(fontName: "Foros-Medium")
    /// Font `Foros-Regular`.
    static let forosRegular = Rswift.FontResource(fontName: "Foros-Regular")
    
    /// `UIFont(name: "Foros-Bold", size: ...)`
    static func forosBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosBold, size: size)
    }
    
    /// `UIFont(name: "Foros-Medium", size: ...)`
    static func forosMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosMedium, size: size)
    }
    
    /// `UIFont(name: "Foros-Regular", size: ...)`
    static func forosRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.forosBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Bold' could not be loaded, is 'Foros-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.forosMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Medium' could not be loaded, is 'Foros-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.forosRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Regular' could not be loaded, is 'Foros-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 44 images.
  struct image {
    /// Image `agree_icon`.
    static let agree_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "agree_icon")
    /// Image `ampoules`.
    static let ampoules = Rswift.ImageResource(bundle: R.hostingBundle, name: "ampoules")
    /// Image `archive_icon`.
    static let archive_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "archive_icon")
    /// Image `arrow_icon`.
    static let arrow_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_icon")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `candles`.
    static let candles = Rswift.ImageResource(bundle: R.hostingBundle, name: "candles")
    /// Image `capsules`.
    static let capsules = Rswift.ImageResource(bundle: R.hostingBundle, name: "capsules")
    /// Image `checkbox_icon`.
    static let checkbox_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_icon")
    /// Image `checkbox_pressed_icon`.
    static let checkbox_pressed_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_pressed_icon")
    /// Image `close_icon`.
    static let close_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_icon")
    /// Image `delete_drug_icon`.
    static let delete_drug_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_drug_icon")
    /// Image `doctor_clinic_icon`.
    static let doctor_clinic_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "doctor_clinic_icon")
    /// Image `drops`.
    static let drops = Rswift.ImageResource(bundle: R.hostingBundle, name: "drops")
    /// Image `drugs_icon`.
    static let drugs_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drugs_icon")
    /// Image `edit_icon`.
    static let edit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_icon")
    /// Image `edit_nav_icon`.
    static let edit_nav_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_nav_icon")
    /// Image `eye_icon`.
    static let eye_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_icon")
    /// Image `eye_open_icon`.
    static let eye_open_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_open_icon")
    /// Image `icon_add_times`.
    static let icon_add_times = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add_times")
    /// Image `info_icon`.
    static let info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_icon")
    /// Image `injections`.
    static let injections = Rswift.ImageResource(bundle: R.hostingBundle, name: "injections")
    /// Image `logo_icon_ru`.
    static let logo_icon_ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_icon_ru")
    /// Image `logo_splash_ru`.
    static let logo_splash_ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_splash_ru")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mark`.
    static let mark = Rswift.ImageResource(bundle: R.hostingBundle, name: "mark")
    /// Image `menu_icon`.
    static let menu_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_icon")
    /// Image `monitoring_icon`.
    static let monitoring_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "monitoring_icon")
    /// Image `notification_icon`.
    static let notification_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_icon")
    /// Image `ointment`.
    static let ointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ointment")
    /// Image `ok_icon`.
    static let ok_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ok_icon")
    /// Image `pass_no_icon`.
    static let pass_no_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_no_icon")
    /// Image `pass_ok_icon`.
    static let pass_ok_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_ok_icon")
    /// Image `path_arrow`.
    static let path_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "path_arrow")
    /// Image `percent_icon`.
    static let percent_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "percent_icon")
    /// Image `pills`.
    static let pills = Rswift.ImageResource(bundle: R.hostingBundle, name: "pills")
    /// Image `plus_icon`.
    static let plus_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_icon")
    /// Image `powder`.
    static let powder = Rswift.ImageResource(bundle: R.hostingBundle, name: "powder")
    /// Image `question_icon`.
    static let question_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "question_icon")
    /// Image `sprays`.
    static let sprays = Rswift.ImageResource(bundle: R.hostingBundle, name: "sprays")
    /// Image `syrup`.
    static let syrup = Rswift.ImageResource(bundle: R.hostingBundle, name: "syrup")
    /// Image `triangle_to_bottom`.
    static let triangle_to_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle_to_bottom")
    /// Image `triangle_to_right`.
    static let triangle_to_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle_to_right")
    /// Image `warn_icon`.
    static let warn_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "warn_icon")
    /// Image `white_close_icon`.
    static let white_close_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_close_icon")
    
    /// `UIImage(named: "agree_icon", bundle: ..., traitCollection: ...)`
    static func agree_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agree_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ampoules", bundle: ..., traitCollection: ...)`
    static func ampoules(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ampoules, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "archive_icon", bundle: ..., traitCollection: ...)`
    static func archive_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archive_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_icon", bundle: ..., traitCollection: ...)`
    static func arrow_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "candles", bundle: ..., traitCollection: ...)`
    static func candles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.candles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "capsules", bundle: ..., traitCollection: ...)`
    static func capsules(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capsules, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_icon", bundle: ..., traitCollection: ...)`
    static func checkbox_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_pressed_icon", bundle: ..., traitCollection: ...)`
    static func checkbox_pressed_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_pressed_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close_icon", bundle: ..., traitCollection: ...)`
    static func close_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete_drug_icon", bundle: ..., traitCollection: ...)`
    static func delete_drug_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_drug_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "doctor_clinic_icon", bundle: ..., traitCollection: ...)`
    static func doctor_clinic_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doctor_clinic_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drops", bundle: ..., traitCollection: ...)`
    static func drops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drops, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drugs_icon", bundle: ..., traitCollection: ...)`
    static func drugs_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drugs_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_icon", bundle: ..., traitCollection: ...)`
    static func edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_nav_icon", bundle: ..., traitCollection: ...)`
    static func edit_nav_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_nav_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_icon", bundle: ..., traitCollection: ...)`
    static func eye_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_open_icon", bundle: ..., traitCollection: ...)`
    static func eye_open_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_open_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_add_times", bundle: ..., traitCollection: ...)`
    static func icon_add_times(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add_times, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info_icon", bundle: ..., traitCollection: ...)`
    static func info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "injections", bundle: ..., traitCollection: ...)`
    static func injections(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.injections, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_icon_ru", bundle: ..., traitCollection: ...)`
    static func logo_icon_ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_icon_ru, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_splash_ru", bundle: ..., traitCollection: ...)`
    static func logo_splash_ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_splash_ru, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mark", bundle: ..., traitCollection: ...)`
    static func mark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_icon", bundle: ..., traitCollection: ...)`
    static func menu_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "monitoring_icon", bundle: ..., traitCollection: ...)`
    static func monitoring_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monitoring_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification_icon", bundle: ..., traitCollection: ...)`
    static func notification_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ointment", bundle: ..., traitCollection: ...)`
    static func ointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ointment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ok_icon", bundle: ..., traitCollection: ...)`
    static func ok_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ok_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_no_icon", bundle: ..., traitCollection: ...)`
    static func pass_no_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_no_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_ok_icon", bundle: ..., traitCollection: ...)`
    static func pass_ok_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_ok_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "path_arrow", bundle: ..., traitCollection: ...)`
    static func path_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "percent_icon", bundle: ..., traitCollection: ...)`
    static func percent_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.percent_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pills", bundle: ..., traitCollection: ...)`
    static func pills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pills, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus_icon", bundle: ..., traitCollection: ...)`
    static func plus_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "powder", bundle: ..., traitCollection: ...)`
    static func powder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.powder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "question_icon", bundle: ..., traitCollection: ...)`
    static func question_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.question_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sprays", bundle: ..., traitCollection: ...)`
    static func sprays(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sprays, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "syrup", bundle: ..., traitCollection: ...)`
    static func syrup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.syrup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle_to_bottom", bundle: ..., traitCollection: ...)`
    static func triangle_to_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle_to_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle_to_right", bundle: ..., traitCollection: ...)`
    static func triangle_to_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle_to_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "warn_icon", bundle: ..., traitCollection: ...)`
    static func warn_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warn_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "white_close_icon", bundle: ..., traitCollection: ...)`
    static func white_close_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_close_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `DrugCell`.
    static let drugCell = _R.nib._DrugCell()
    /// Nib `MedicineCourseCell`.
    static let medicineCourseCell = _R.nib._MedicineCourseCell()
    /// Nib `MenuModuleCell`.
    static let menuModuleCell = _R.nib._MenuModuleCell()
    /// Nib `StandartPagePickerCell`.
    static let standartPagePickerCell = _R.nib._StandartPagePickerCell()
    /// Nib `StandartPagePicker`.
    static let standartPagePicker = _R.nib._StandartPagePicker()
    
    /// `UINib(name: "DrugCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drugCell) instead")
    static func drugCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drugCell)
    }
    
    /// `UINib(name: "MedicineCourseCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.medicineCourseCell) instead")
    static func medicineCourseCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.medicineCourseCell)
    }
    
    /// `UINib(name: "MenuModuleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuModuleCell) instead")
    static func menuModuleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuModuleCell)
    }
    
    /// `UINib(name: "StandartPagePicker", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.standartPagePicker) instead")
    static func standartPagePicker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.standartPagePicker)
    }
    
    /// `UINib(name: "StandartPagePickerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.standartPagePickerCell) instead")
    static func standartPagePickerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.standartPagePickerCell)
    }
    
    static func drugCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrugCell? {
      return R.nib.drugCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrugCell
    }
    
    static func medicineCourseCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MedicineCourseCell? {
      return R.nib.medicineCourseCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MedicineCourseCell
    }
    
    static func menuModuleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuModuleCell? {
      return R.nib.menuModuleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuModuleCell
    }
    
    static func standartPagePicker(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePicker? {
      return R.nib.standartPagePicker.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePicker
    }
    
    static func standartPagePickerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePickerCell? {
      return R.nib.standartPagePickerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePickerCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DrugCell`.
    static let drugCell: Rswift.ReuseIdentifier<DrugCell> = Rswift.ReuseIdentifier(identifier: "DrugCell")
    /// Reuse identifier `MedicineCourseCell`.
    static let medicineCourseCell: Rswift.ReuseIdentifier<MedicineCourseCell> = Rswift.ReuseIdentifier(identifier: "MedicineCourseCell")
    /// Reuse identifier `MenuModuleCell`.
    static let menuModuleCell: Rswift.ReuseIdentifier<MenuModuleCell> = Rswift.ReuseIdentifier(identifier: "MenuModuleCell")
    /// Reuse identifier `StandartPagePickerCell`.
    static let standartPagePickerCell: Rswift.ReuseIdentifier<StandartPagePickerCell> = Rswift.ReuseIdentifier(identifier: "StandartPagePickerCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 23 storyboards.
  struct storyboard {
    /// Storyboard `AcceptRestorePassword`.
    static let acceptRestorePassword = _R.storyboard.acceptRestorePassword()
    /// Storyboard `AnimateLaunchScreenViewController`.
    static let animateLaunchScreenViewController = _R.storyboard.animateLaunchScreenViewController()
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `BackgroundViewController`.
    static let backgroundViewController = _R.storyboard.backgroundViewController()
    /// Storyboard `CalculatorPopup`.
    static let calculatorPopup = _R.storyboard.calculatorPopup()
    /// Storyboard `ConfirmDecisionPopup`.
    static let confirmDecisionPopup = _R.storyboard.confirmDecisionPopup()
    /// Storyboard `CreateMedicineCourse`.
    static let createMedicineCourse = _R.storyboard.createMedicineCourse()
    /// Storyboard `DrugDetails`.
    static let drugDetails = _R.storyboard.drugDetails()
    /// Storyboard `DrugEdit`.
    static let drugEdit = _R.storyboard.drugEdit()
    /// Storyboard `DrugPeriodicEdit`.
    static let drugPeriodicEdit = _R.storyboard.drugPeriodicEdit()
    /// Storyboard `DrugTimesEdit`.
    static let drugTimesEdit = _R.storyboard.drugTimesEdit()
    /// Storyboard `DrugsList`.
    static let drugsList = _R.storyboard.drugsList()
    /// Storyboard `ErrorCode`.
    static let errorCode = _R.storyboard.errorCode()
    /// Storyboard `InputTextPopup`.
    static let inputTextPopup = _R.storyboard.inputTextPopup()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MedicineCourse`.
    static let medicineCourse = _R.storyboard.medicineCourse()
    /// Storyboard `MenuModuleViewController`.
    static let menuModuleViewController = _R.storyboard.menuModuleViewController()
    /// Storyboard `MethodObtaining`.
    static let methodObtaining = _R.storyboard.methodObtaining()
    /// Storyboard `PinCode`.
    static let pinCode = _R.storyboard.pinCode()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Registration`.
    static let registration = _R.storyboard.registration()
    /// Storyboard `RestorePassword`.
    static let restorePassword = _R.storyboard.restorePassword()
    
    /// `UIStoryboard(name: "AcceptRestorePassword", bundle: ...)`
    static func acceptRestorePassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.acceptRestorePassword)
    }
    
    /// `UIStoryboard(name: "AnimateLaunchScreenViewController", bundle: ...)`
    static func animateLaunchScreenViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.animateLaunchScreenViewController)
    }
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "BackgroundViewController", bundle: ...)`
    static func backgroundViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.backgroundViewController)
    }
    
    /// `UIStoryboard(name: "CalculatorPopup", bundle: ...)`
    static func calculatorPopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.calculatorPopup)
    }
    
    /// `UIStoryboard(name: "ConfirmDecisionPopup", bundle: ...)`
    static func confirmDecisionPopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.confirmDecisionPopup)
    }
    
    /// `UIStoryboard(name: "CreateMedicineCourse", bundle: ...)`
    static func createMedicineCourse(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createMedicineCourse)
    }
    
    /// `UIStoryboard(name: "DrugDetails", bundle: ...)`
    static func drugDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drugDetails)
    }
    
    /// `UIStoryboard(name: "DrugEdit", bundle: ...)`
    static func drugEdit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drugEdit)
    }
    
    /// `UIStoryboard(name: "DrugPeriodicEdit", bundle: ...)`
    static func drugPeriodicEdit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drugPeriodicEdit)
    }
    
    /// `UIStoryboard(name: "DrugTimesEdit", bundle: ...)`
    static func drugTimesEdit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drugTimesEdit)
    }
    
    /// `UIStoryboard(name: "DrugsList", bundle: ...)`
    static func drugsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.drugsList)
    }
    
    /// `UIStoryboard(name: "ErrorCode", bundle: ...)`
    static func errorCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.errorCode)
    }
    
    /// `UIStoryboard(name: "InputTextPopup", bundle: ...)`
    static func inputTextPopup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.inputTextPopup)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MedicineCourse", bundle: ...)`
    static func medicineCourse(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.medicineCourse)
    }
    
    /// `UIStoryboard(name: "MenuModuleViewController", bundle: ...)`
    static func menuModuleViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuModuleViewController)
    }
    
    /// `UIStoryboard(name: "MethodObtaining", bundle: ...)`
    static func methodObtaining(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.methodObtaining)
    }
    
    /// `UIStoryboard(name: "PinCode", bundle: ...)`
    static func pinCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.pinCode)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Registration", bundle: ...)`
    static func registration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registration)
    }
    
    /// `UIStoryboard(name: "RestorePassword", bundle: ...)`
    static func restorePassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.restorePassword)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 327 localization keys.
    struct localizable {
      /// ru translation: <div class='black_regular_text center'>Если вы уже зарегистрированы <a class='href' href='auth'>нажмите сюда.</a></div>
      /// 
      /// Locales: ru
      static let registration_bottom_string_html = Rswift.StringResource(key: "registration_bottom_string_html", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: <div class='black_regular_text'>Я принимаю условия <a class='href' href='license'>лицензионного соглашения</a> и даю согласие на обработку персональных данных.</div>
      /// 
      /// Locales: ru
      static let registration_lic_aggrement_string = Rswift.StringResource(key: "registration_lic_aggrement_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: <div class='black_regular_text'>Я соглашаюсь на <a class='href' href='medicine'>медицинское вмешательство</a> во время онлайн-консультаций.</div>
      /// 
      /// Locales: ru
      static let registration_med_aggrement_string = Rswift.StringResource(key: "registration_med_aggrement_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: <div class='body'> %@ </div>
      /// 
      /// Locales: ru
      static let drug_details_template = Rswift.StringResource(key: "drug_details_template", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Авторизация
      /// 
      /// Locales: ru
      static let auth_name = Rswift.StringResource(key: "auth_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ампул
      /// 
      /// Locales: ru
      static let ampoules_5 = Rswift.StringResource(key: "ampoules_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ампула
      /// 
      /// Locales: ru
      static let ampoules_1 = Rswift.StringResource(key: "ampoules_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ампулы
      /// 
      /// Locales: ru
      static let ampoules = Rswift.StringResource(key: "ampoules", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ампулы
      /// 
      /// Locales: ru
      static let ampoules_2_4 = Rswift.StringResource(key: "ampoules_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Архив курсов
      /// 
      /// Locales: ru
      static let medicine_course_archive = Rswift.StringResource(key: "medicine_course_archive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Архив мед. данных
      /// 
      /// Locales: ru
      static let archive_section_label = Rswift.StringResource(key: "archive_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Банка
      /// 
      /// Locales: ru
      static let jar = Rswift.StringResource(key: "jar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Блокировка запросов (не более 1 за 120 сек), попробуйте позже
      /// 
      /// Locales: ru
      static let oftenCodeRequestError = Rswift.StringResource(key: "oftenCodeRequestError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ВОССТАНОВЛЕНИЕ ПАРОЛЯ
      /// 
      /// Locales: ru
      static let restore_password_title_string = Rswift.StringResource(key: "restore_password_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите ваш новый пароль.
      /// 
      /// Locales: ru
      static let accept_restore_password_description_string = Rswift.StringResource(key: "accept_restore_password_description_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите ваш номер телефона или e-mail.
      /// 
      /// Locales: ru
      static let registration_desc_string = Rswift.StringResource(key: "registration_desc_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите ваш номер телефона или e-mail.
      /// 
      /// Locales: ru
      static let restore_password_description_string = Rswift.StringResource(key: "restore_password_description_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите код подтверждения отправленный на %@
      /// 
      /// Locales: ru
      static let pin_desc_string = Rswift.StringResource(key: "pin_desc_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите название
      /// 
      /// Locales: ru
      static let str_drugedit_name_placeholder = Rswift.StringResource(key: "str_drugedit_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите название для нового курса
      /// 
      /// Locales: ru
      static let create_med_course_text_string = Rswift.StringResource(key: "create_med_course_text_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Введите новое название для курса.
      /// 
      /// Locales: ru
      static let rename_med_course_text_string = Rswift.StringResource(key: "rename_med_course_text_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static let enter_button_title_string = Rswift.StringResource(key: "enter_button_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Воскресенье
      /// 
      /// Locales: ru
      static let full_sunday = Rswift.StringResource(key: "full_sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static let restore_password_restore_button_string = Rswift.StringResource(key: "restore_password_restore_button_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Впрыски
      /// 
      /// Locales: ru
      static let inject = Rswift.StringResource(key: "inject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Врачи и клиники
      /// 
      /// Locales: ru
      static let doctor_clinic_section_label = Rswift.StringResource(key: "doctor_clinic_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Время
      /// 
      /// Locales: ru
      static let str_drugedit_times_time_placeholder = Rswift.StringResource(key: "str_drugedit_times_time_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Время приема
      /// 
      /// Locales: ru
      static let str_drugedit_times = Rswift.StringResource(key: "str_drugedit_times", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Время приема
      /// 
      /// Locales: ru
      static let time_of_reception = Rswift.StringResource(key: "time_of_reception", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вс
      /// 
      /// Locales: ru
      static let short_sunday = Rswift.StringResource(key: "short_sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вт
      /// 
      /// Locales: ru
      static let short_tuesday = Rswift.StringResource(key: "short_tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вторник
      /// 
      /// Locales: ru
      static let full_tuesday = Rswift.StringResource(key: "full_tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы ввели неверный код.
      /// 
      /// Locales: ru
      static let pin_error_template_string = Rswift.StringResource(key: "pin_error_template_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы ввели неверный код. Осталось попыток: %@.
      /// 
      /// Locales: ru
      static let pin_error_template_count_string = Rswift.StringResource(key: "pin_error_template_count_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы неудачно ввели пароль слишком много раз. Мы отправим вам код для проверки. Выберите способ получения.
      /// 
      /// Locales: ru
      static let method_obataining_description_string = Rswift.StringResource(key: "method_obataining_description_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы три раза ввели неверный код подтверждения, чтобы повторить процедуру нажмите"Отправить код повторно"
      /// 
      /// Locales: ru
      static let error_code_desc_string = Rswift.StringResource(key: "error_code_desc_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы уверенны что хотите убрать данный препарат из Вашего курса?
      /// 
      /// Locales: ru
      static let drug_edit_delete_message = Rswift.StringResource(key: "drug_edit_delete_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы уверены что хотите удалить ваш курс лекарств?
      /// 
      /// Locales: ru
      static let delete_med_course_text_string = Rswift.StringResource(key: "delete_med_course_text_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбирайте специалиста и медицинский центр по разнообразным критериям
      /// 
      /// Locales: ru
      static let doctor_clinic_section_description = Rswift.StringResource(key: "doctor_clinic_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбрать
      /// 
      /// Locales: ru
      static let method_obataining_enter_string = Rswift.StringResource(key: "method_obataining_enter_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выбрать
      /// 
      /// Locales: ru
      static let ok_string = Rswift.StringResource(key: "ok_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выполняйте рекомендации по своему образу жизни
      /// 
      /// Locales: ru
      static let recommend_section_description = Rswift.StringResource(key: "recommend_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Выход
      /// 
      /// Locales: ru
      static let auth_alias = Rswift.StringResource(key: "auth_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Город
      /// 
      /// Locales: ru
      static let profile_city_placeholder_string = Rswift.StringResource(key: "profile_city_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Граммы
      /// 
      /// Locales: ru
      static let gramm = Rswift.StringResource(key: "gramm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата
      /// 
      /// Locales: ru
      static let drug_times_todate = Rswift.StringResource(key: "drug_times_todate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дата рождения
      /// 
      /// Locales: ru
      static let profile_date_placeholder_string = Rswift.StringResource(key: "profile_date_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: День
      /// 
      /// Locales: ru
      static let days1 = Rswift.StringResource(key: "days1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Десертная ложка
      /// 
      /// Locales: ru
      static let dessertSpoon = Rswift.StringResource(key: "dessertSpoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дней
      /// 
      /// Locales: ru
      static let days5 = Rswift.StringResource(key: "days5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дни
      /// 
      /// Locales: ru
      static let drug_times_days = Rswift.StringResource(key: "drug_times_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дни
      /// 
      /// Locales: ru
      static let periodic_days = Rswift.StringResource(key: "periodic_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дня
      /// 
      /// Locales: ru
      static let days2_4 = Rswift.StringResource(key: "days2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить прием
      /// 
      /// Locales: ru
      static let str_drugedit_add_times = Rswift.StringResource(key: "str_drugedit_add_times", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавление препарата
      /// 
      /// Locales: ru
      static let create_drug_title = Rswift.StringResource(key: "create_drug_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавляйте приемы лекарств и придерживайтесь графика лечения
      /// 
      /// Locales: ru
      static let course_section_description = Rswift.StringResource(key: "course_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавьте курс. Для того, чтобы добавить курс,  нажмите +
      /// 
      /// Locales: ru
      static let med_cource_empty_placeholder = Rswift.StringResource(key: "med_cource_empty_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавьте препарат. Для того, чтобы добавить лекарства в курс,  нажмите +
      /// 
      /// Locales: ru
      static let drug_list_empty_placeholder = Rswift.StringResource(key: "drug_list_empty_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Доза
      /// 
      /// Locales: ru
      static let dose = Rswift.StringResource(key: "dose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Дозировка
      /// 
      /// Locales: ru
      static let str_drugedit_times_dose_placeholder = Rswift.StringResource(key: "str_drugedit_times_dose_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ед.ы
      /// 
      /// Locales: ru
      static let item = Rswift.StringResource(key: "item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Единица измерения
      /// 
      /// Locales: ru
      static let str_drugedit_unit_placeholder = Rswift.StringResource(key: "str_drugedit_unit_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Если вы уже зарегистрированы нажмите сюда.
      /// 
      /// Locales: ru
      static let registration_bottom_string = Rswift.StringResource(key: "registration_bottom_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Женский
      /// 
      /// Locales: ru
      static let gender_female = Rswift.StringResource(key: "gender_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static let forgot_button_title_string = Rswift.StringResource(key: "forgot_button_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Загружайте свою историю болезни, чтобы она всегда была под рукой. Больше никаких потерянных карт и лишних бумажек. Архив поможет врачу поставить точный диагноз гораздо быстрее.
      /// 
      /// Locales: ru
      static let archive_description = Rswift.StringResource(key: "archive_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Заполните поля чтобы продолжить работу в приложении.
      /// 
      /// Locales: ru
      static let profile_description_string = Rswift.StringResource(key: "profile_description_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Зарегистрироваться
      /// 
      /// Locales: ru
      static let registration_button_string = Rswift.StringResource(key: "registration_button_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Имя
      /// 
      /// Locales: ru
      static let profile_name_placeholder_string = Rswift.StringResource(key: "profile_name_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Интервал
      /// 
      /// Locales: ru
      static let periodic_interval = Rswift.StringResource(key: "periodic_interval", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Каждый день
      /// 
      /// Locales: ru
      static let full_allday = Rswift.StringResource(key: "full_allday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капель
      /// 
      /// Locales: ru
      static let drops_5 = Rswift.StringResource(key: "drops_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static let drop = Rswift.StringResource(key: "drop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static let drops = Rswift.StringResource(key: "drops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static let drops_2_4 = Rswift.StringResource(key: "drops_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капля
      /// 
      /// Locales: ru
      static let drops_1 = Rswift.StringResource(key: "drops_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капсул
      /// 
      /// Locales: ru
      static let capsules_5 = Rswift.StringResource(key: "capsules_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капсула
      /// 
      /// Locales: ru
      static let capsules_1 = Rswift.StringResource(key: "capsules_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static let capsule = Rswift.StringResource(key: "capsule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static let capsules = Rswift.StringResource(key: "capsules", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static let capsules_2_4 = Rswift.StringResource(key: "capsules_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Конец курса:
      /// 
      /// Locales: ru
      static let course_end = Rswift.StringResource(key: "course_end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static let drug_times_edit_title = Rswift.StringResource(key: "drug_times_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static let end_of_the_reception = Rswift.StringResource(key: "end_of_the_reception", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static let str_drugedit_end_use_placeholder = Rswift.StringResource(key: "str_drugedit_end_use_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Куб. см
      /// 
      /// Locales: ru
      static let smCubic = Rswift.StringResource(key: "smCubic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static let course_section_label = Rswift.StringResource(key: "course_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static let medicine_course_alias = Rswift.StringResource(key: "medicine_course_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static let medicine_course_name = Rswift.StringResource(key: "medicine_course_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Лекарства
      /// 
      /// Locales: ru
      static let drugs = Rswift.StringResource(key: "drugs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Логин не зарегистрирован
      /// 
      /// Locales: ru
      static let accept_restore_password_loginUnregisterError = Rswift.StringResource(key: "accept_restore_password_loginUnregisterError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Логин уже зарегистрирован
      /// 
      /// Locales: ru
      static let profile_alreadyRegisterLoginError = Rswift.StringResource(key: "profile_alreadyRegisterLoginError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static let me = Rswift.StringResource(key: "me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static let me_1 = Rswift.StringResource(key: "me_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static let me_2_4 = Rswift.StringResource(key: "me_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static let me_5 = Rswift.StringResource(key: "me_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мазей
      /// 
      /// Locales: ru
      static let ointment_5 = Rswift.StringResource(key: "ointment_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мази
      /// 
      /// Locales: ru
      static let ointment_2_4 = Rswift.StringResource(key: "ointment_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мазь
      /// 
      /// Locales: ru
      static let ointment = Rswift.StringResource(key: "ointment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мазь
      /// 
      /// Locales: ru
      static let ointment_1 = Rswift.StringResource(key: "ointment_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мг.
      /// 
      /// Locales: ru
      static let mg = Rswift.StringResource(key: "mg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мг/мл
      /// 
      /// Locales: ru
      static let mgMl = Rswift.StringResource(key: "mgMl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мерная ложка
      /// 
      /// Locales: ru
      static let measuringSpoon = Rswift.StringResource(key: "measuringSpoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мкг.
      /// 
      /// Locales: ru
      static let mkg = Rswift.StringResource(key: "mkg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мкг/мл
      /// 
      /// Locales: ru
      static let mkgMl = Rswift.StringResource(key: "mkgMl", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мл.
      /// 
      /// Locales: ru
      static let ml = Rswift.StringResource(key: "ml", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мониторинг
      /// 
      /// Locales: ru
      static let monitoring_section_label = Rswift.StringResource(key: "monitoring_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Мужской
      /// 
      /// Locales: ru
      static let gender_male = Rswift.StringResource(key: "gender_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: НОВЫЙ КУРС
      /// 
      /// Locales: ru
      static let create_med_course_caption_string = Rswift.StringResource(key: "create_med_course_caption_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: НОВЫЙ ПАРОЛЬ
      /// 
      /// Locales: ru
      static let accept_restore_password_title_string = Rswift.StringResource(key: "accept_restore_password_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Навеска
      /// 
      /// Locales: ru
      static let hitch = Rswift.StringResource(key: "hitch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Название курса
      /// 
      /// Locales: ru
      static let create_med_course_nameplaceholder_string = Rswift.StringResource(key: "create_med_course_nameplaceholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Название курса
      /// 
      /// Locales: ru
      static let rename_med_course_nameplaceholder_string = Rswift.StringResource(key: "rename_med_course_nameplaceholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Настройте любые схемы и курсы лекарственных препаратов, прописанных врачом, и получайте уведомления, чтобы не пропустить прием. Все курсы сохраняются в архиве, и ими можно воспользоваться повторно.
      /// 
      /// Locales: ru
      static let course_description = Rswift.StringResource(key: "course_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Начало курса:
      /// 
      /// Locales: ru
      static let course_start = Rswift.StringResource(key: "course_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Начало приема
      /// 
      /// Locales: ru
      static let beginning_of_the_reception = Rswift.StringResource(key: "beginning_of_the_reception", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Начало приема
      /// 
      /// Locales: ru
      static let str_drugedit_begin_use_placeholder = Rswift.StringResource(key: "str_drugedit_begin_use_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не выбрано
      /// 
      /// Locales: ru
      static let str_drugedit_period_data_paceholder = Rswift.StringResource(key: "str_drugedit_period_data_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не забыть о своем здоровье в ежедневной суете помогут регулярные уведомления (push, смс или e-mail). Они учитывают ваш индивидуальный график обследований и напоминают, что пришло время очередной проверки. Получите подробную информацию, о том, какого специалиста пора посетить и какие анализы сдать именно вам.
      /// 
      /// Locales: ru
      static let notification_description = Rswift.StringResource(key: "notification_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Неверный логин
      /// 
      /// Locales: ru
      static let incorrectLoginError = Rswift.StringResource(key: "incorrectLoginError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Неверный логин или пароль.
      /// 
      /// Locales: ru
      static let error_credentials_string = Rswift.StringResource(key: "error_credentials_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Неверный логин или пароль. Осталось попыток: %@.
      /// 
      /// Locales: ru
      static let error_credentials_count_string = Rswift.StringResource(key: "error_credentials_count_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Неверный пароль
      /// 
      /// Locales: ru
      static let incorrectPasswordError = Rswift.StringResource(key: "incorrectPasswordError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Недопустимое значение поля "Город"
      /// 
      /// Locales: ru
      static let profile_incorrectCityError = Rswift.StringResource(key: "profile_incorrectCityError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Недопустимое значение поля "День рождения"
      /// 
      /// Locales: ru
      static let profile_incorrectBirthdayError = Rswift.StringResource(key: "profile_incorrectBirthdayError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Недопустимое значение поля "Имя"
      /// 
      /// Locales: ru
      static let profile_incorrectNameError = Rswift.StringResource(key: "profile_incorrectNameError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Недопустимое значение поля "Пароль"
      /// 
      /// Locales: ru
      static let profile_incorrectPasswordError = Rswift.StringResource(key: "profile_incorrectPasswordError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Недопустимое значение поля "Пол"
      /// 
      /// Locales: ru
      static let profile_incorrectGenderError = Rswift.StringResource(key: "profile_incorrectGenderError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ОШИБКА
      /// 
      /// Locales: ru
      static let error_code_top_string = Rswift.StringResource(key: "error_code_top_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обширная база медицинских организаций и специалистов. Рейтинг, отзывы пациентов, график работы и другие критерии помогут вам с выбором. Пройти необходимую диагностику вы можете дома или в офисе, заказав выезд мед.сестры.
      /// 
      /// Locales: ru
      static let doctor_clinic_description = Rswift.StringResource(key: "doctor_clinic_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Общие данные
      /// 
      /// Locales: ru
      static let str_drugedit_general_data = Rswift.StringResource(key: "str_drugedit_general_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Оставить
      /// 
      /// Locales: ru
      static let drug_edit_delete_cancel = Rswift.StringResource(key: "drug_edit_delete_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отвечайте на вопросы умной анкеты и узнайте свои риски.
      /// 
      /// Locales: ru
      static let risk_section_description = Rswift.StringResource(key: "risk_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static let back_string = Rswift.StringResource(key: "back_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let accept_restore_password_cancel_button_string = Rswift.StringResource(key: "accept_restore_password_cancel_button_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let create_med_course_cancel_string = Rswift.StringResource(key: "create_med_course_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let delete_med_course_cancel_string = Rswift.StringResource(key: "delete_med_course_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let profile_cancel_string = Rswift.StringResource(key: "profile_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let rename_med_course_cancel_string = Rswift.StringResource(key: "rename_med_course_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let restore_password_cancel_button_string = Rswift.StringResource(key: "restore_password_cancel_button_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static let error_code_cancel_string = Rswift.StringResource(key: "error_code_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static let method_obataining_cancel_string = Rswift.StringResource(key: "method_obataining_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static let pin_cancel_string = Rswift.StringResource(key: "pin_cancel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить код повторно.
      /// 
      /// Locales: ru
      static let pin_resend_string = Rswift.StringResource(key: "pin_resend_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправить повторно.
      /// 
      /// Locales: ru
      static let error_code_accept_string = Rswift.StringResource(key: "error_code_accept_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отслеживайте свои медицинские показатели на графике
      /// 
      /// Locales: ru
      static let monitoring_section_description = Rswift.StringResource(key: "monitoring_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка получения списка городов.
      /// 
      /// Locales: ru
      static let cities_error_string = Rswift.StringResource(key: "cities_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static let accept_restore_password_error_string = Rswift.StringResource(key: "accept_restore_password_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static let auth_error_string = Rswift.StringResource(key: "auth_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static let pin_error_string = Rswift.StringResource(key: "pin_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static let profile_error_string = Rswift.StringResource(key: "profile_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static let restore_password_error_string = Rswift.StringResource(key: "restore_password_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка регистрации. Проверьте все поля.
      /// 
      /// Locales: ru
      static let registration_error_string = Rswift.StringResource(key: "registration_error_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПЕРЕИМЕНОВАНИЕ
      /// 
      /// Locales: ru
      static let rename_med_course_caption_string = Rswift.StringResource(key: "rename_med_course_caption_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПОДТВЕРЖДЕНИЕ
      /// 
      /// Locales: ru
      static let pin_top_string = Rswift.StringResource(key: "pin_top_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ПРОФИЛЬ
      /// 
      /// Locales: ru
      static let profile_header_string = Rswift.StringResource(key: "profile_header_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let accept_restore_password_placeholder_string = Rswift.StringResource(key: "accept_restore_password_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static let password_placeholder_string = Rswift.StringResource(key: "password_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static let drug_periodic_edit_title = Rswift.StringResource(key: "drug_periodic_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static let periodic = Rswift.StringResource(key: "periodic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static let str_drugedit_period_data = Rswift.StringResource(key: "str_drugedit_period_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пин код
      /// 
      /// Locales: ru
      static let pin_code_alias = Rswift.StringResource(key: "pin_code_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пин код
      /// 
      /// Locales: ru
      static let pin_code_name = Rswift.StringResource(key: "pin_code_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пин код успешно отправлен.
      /// 
      /// Locales: ru
      static let pin_success_string = Rswift.StringResource(key: "pin_success_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пн
      /// 
      /// Locales: ru
      static let short_monday = Rswift.StringResource(key: "short_monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: По результатам тестирования вам будет предложен индивидуальный перечень обследований и последовательный график их прохождения. Начните диагностику с самых высоких рисков, постепенно исключая все угрозы. Пройдите обследование полностью, чтобы сделать свою жизнь комфортной и безопасной.
      /// 
      /// Locales: ru
      static let check_health_description = Rswift.StringResource(key: "check_health_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повторите пароль
      /// 
      /// Locales: ru
      static let accept_restore_password_repeat_placeholder_string = Rswift.StringResource(key: "accept_restore_password_repeat_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повторите пароль
      /// 
      /// Locales: ru
      static let password_repeat_placeholder_string = Rswift.StringResource(key: "password_repeat_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подтвердить
      /// 
      /// Locales: ru
      static let pin_accept_string = Rswift.StringResource(key: "pin_accept_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пол
      /// 
      /// Locales: ru
      static let profile_gender_placeholder_string = Rswift.StringResource(key: "profile_gender_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Получайте уведомления о необходимости посетить врача и пройти диагностику
      /// 
      /// Locales: ru
      static let notification_section_description = Rswift.StringResource(key: "notification_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Понедельник
      /// 
      /// Locales: ru
      static let full_monday = Rswift.StringResource(key: "full_monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пора принять лекарство!
      /// 
      /// Locales: ru
      static let need_to_accept_a_pill = Rswift.StringResource(key: "need_to_accept_a_pill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Порошок
      /// 
      /// Locales: ru
      static let powder = Rswift.StringResource(key: "powder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Прием
      /// 
      /// Locales: ru
      static let usage_1 = Rswift.StringResource(key: "usage_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Приема
      /// 
      /// Locales: ru
      static let usage_2_4 = Rswift.StringResource(key: "usage_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Приемов
      /// 
      /// Locales: ru
      static let usage_5 = Rswift.StringResource(key: "usage_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Приемы
      /// 
      /// Locales: ru
      static let drug_times_usages = Rswift.StringResource(key: "drug_times_usages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Продолжительность приема
      /// 
      /// Locales: ru
      static let str_drugedit_longtime_data = Rswift.StringResource(key: "str_drugedit_longtime_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Продолжить
      /// 
      /// Locales: ru
      static let profile_next_string = Rswift.StringResource(key: "profile_next_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пройдите простое тестирование, которое выявит потенциальные риски возникновения заболеваний: высокие, средние и низкие.  Анкета составлена ведущими врачами РФ и позволяет оценить вероятность развития самых опасных заболеваний: онкологических, сердечно-сосудистых, заболеваний легких и других.
      /// 
      /// Locales: ru
      static let risk_description = Rswift.StringResource(key: "risk_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проконтролируйте происходящие в организме изменения, наблюдая за динамикой на графике. Вы можете отслеживать любые количественные лабораторные показатели, а также поделиться этой информацией с врачом.
      /// 
      /// Locales: ru
      static let monitoring_description = Rswift.StringResource(key: "monitoring_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Проценты
      /// 
      /// Locales: ru
      static let proc = Rswift.StringResource(key: "proc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пт
      /// 
      /// Locales: ru
      static let short_friday = Rswift.StringResource(key: "short_friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Пятница
      /// 
      /// Locales: ru
      static let full_friday = Rswift.StringResource(key: "full_friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: РЕГИСТРАЦИЯ
      /// 
      /// Locales: ru
      static let registration_title_string = Rswift.StringResource(key: "registration_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рабочий стол
      /// 
      /// Locales: ru
      static let main_alias = Rswift.StringResource(key: "main_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рабочий стол
      /// 
      /// Locales: ru
      static let main_name = Rswift.StringResource(key: "main_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 1 день
      /// 
      /// Locales: ru
      static let per_1_day = Rswift.StringResource(key: "per_1_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 2 дня
      /// 
      /// Locales: ru
      static let per_2_day = Rswift.StringResource(key: "per_2_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 3 дня
      /// 
      /// Locales: ru
      static let per_3_day = Rswift.StringResource(key: "per_3_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 4 дня
      /// 
      /// Locales: ru
      static let per_4_day = Rswift.StringResource(key: "per_4_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 5 дней
      /// 
      /// Locales: ru
      static let per_5_day = Rswift.StringResource(key: "per_5_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 6 дней
      /// 
      /// Locales: ru
      static let per_6_day = Rswift.StringResource(key: "per_6_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 7 дней
      /// 
      /// Locales: ru
      static let per_7_day = Rswift.StringResource(key: "per_7_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раз в 8 дней
      /// 
      /// Locales: ru
      static let per_8_day = Rswift.StringResource(key: "per_8_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Раздел в разработке
      /// 
      /// Locales: ru
      static let section_in_develop = Rswift.StringResource(key: "section_in_develop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static let registration_button_title_string = Rswift.StringResource(key: "registration_button_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рекомендации
      /// 
      /// Locales: ru
      static let str_drugedit_recomendations = Rswift.StringResource(key: "str_drugedit_recomendations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Рутина
      /// 
      /// Locales: ru
      static let logo_string = Rswift.StringResource(key: "logo_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: СПОСОБ ПОЛУЧЕНИЯ
      /// 
      /// Locales: ru
      static let method_obataining_title_string = Rswift.StringResource(key: "method_obataining_title_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сб
      /// 
      /// Locales: ru
      static let short_saturday = Rswift.StringResource(key: "short_saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Свеча
      /// 
      /// Locales: ru
      static let candles_1 = Rswift.StringResource(key: "candles_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Свечей
      /// 
      /// Locales: ru
      static let candles_5 = Rswift.StringResource(key: "candles_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Свечи
      /// 
      /// Locales: ru
      static let candles = Rswift.StringResource(key: "candles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Свечи
      /// 
      /// Locales: ru
      static let candles_2_4 = Rswift.StringResource(key: "candles_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сироп
      /// 
      /// Locales: ru
      static let syrup = Rswift.StringResource(key: "syrup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сироп
      /// 
      /// Locales: ru
      static let syrup_1 = Rswift.StringResource(key: "syrup_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сиропа
      /// 
      /// Locales: ru
      static let syrup_2_4 = Rswift.StringResource(key: "syrup_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сиропов
      /// 
      /// Locales: ru
      static let syrup_5 = Rswift.StringResource(key: "syrup_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Система напоминаний
      /// 
      /// Locales: ru
      static let notification_section_label = Rswift.StringResource(key: "notification_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Следующая попытка ввода пароля через %@ сек.
      /// 
      /// Locales: ru
      static let error_block_login_string = Rswift.StringResource(key: "error_block_login_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Снизить вероятность развития опасных заболеваний можно, выполняя персональные рекомендации. Они формируются приложением на основе сравнения ваших потенциальных рисков и фактических результатов диагностики. Информация тщательно проверяется квалифицированным врачом.
      /// 
      /// Locales: ru
      static let recommend_description = Rswift.StringResource(key: "recommend_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Соблюдайте персональный план обследований
      /// 
      /// Locales: ru
      static let check_health_section_description = Rswift.StringResource(key: "check_health_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Создать
      /// 
      /// Locales: ru
      static let create_med_course_accept_string = Rswift.StringResource(key: "create_med_course_accept_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранить
      /// 
      /// Locales: ru
      static let rename_med_course_accept_string = Rswift.StringResource(key: "rename_med_course_accept_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохранить пароль
      /// 
      /// Locales: ru
      static let accept_restore_password_restore_button_string = Rswift.StringResource(key: "accept_restore_password_restore_button_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сохраняйте результаты прошедших обследований и приемов врачей
      /// 
      /// Locales: ru
      static let archive_section_description = Rswift.StringResource(key: "archive_section_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Спреев
      /// 
      /// Locales: ru
      static let sprays_5 = Rswift.StringResource(key: "sprays_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Спрей
      /// 
      /// Locales: ru
      static let sprays = Rswift.StringResource(key: "sprays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Спрей
      /// 
      /// Locales: ru
      static let sprays_1 = Rswift.StringResource(key: "sprays_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Спрея
      /// 
      /// Locales: ru
      static let sprays_2_4 = Rswift.StringResource(key: "sprays_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ср
      /// 
      /// Locales: ru
      static let short_wednesday = Rswift.StringResource(key: "short_wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Среда
      /// 
      /// Locales: ru
      static let full_wednesday = Rswift.StringResource(key: "full_wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ст. ложки
      /// 
      /// Locales: ru
      static let tablespoon = Rswift.StringResource(key: "tablespoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Суббота
      /// 
      /// Locales: ru
      static let full_saturday = Rswift.StringResource(key: "full_saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Суппозитории
      /// 
      /// Locales: ru
      static let suppository = Rswift.StringResource(key: "suppository", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Таблетка
      /// 
      /// Locales: ru
      static let pills_1 = Rswift.StringResource(key: "pills_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static let pill = Rswift.StringResource(key: "pill", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static let pills = Rswift.StringResource(key: "pills", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static let pills_2_4 = Rswift.StringResource(key: "pills_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Таблеток
      /// 
      /// Locales: ru
      static let pills_5 = Rswift.StringResource(key: "pills_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Текущие курсы
      /// 
      /// Locales: ru
      static let medicine_course_now = Rswift.StringResource(key: "medicine_course_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Телефон / E-mail
      /// 
      /// Locales: ru
      static let login_placeholder_string = Rswift.StringResource(key: "login_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Телефон / E-mail
      /// 
      /// Locales: ru
      static let restore_password_login_placeholder_string = Rswift.StringResource(key: "restore_password_login_placeholder_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Тип
      /// 
      /// Locales: ru
      static let str_drugedit_type_placeholder = Rswift.StringResource(key: "str_drugedit_type_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Тюбик
      /// 
      /// Locales: ru
      static let tube = Rswift.StringResource(key: "tube", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: УДАЛЕНИЕ КУРСА
      /// 
      /// Locales: ru
      static let delete_med_course_caption_string = Rswift.StringResource(key: "delete_med_course_caption_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Убрать
      /// 
      /// Locales: ru
      static let drug_edit_delete_confirm = Rswift.StringResource(key: "drug_edit_delete_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Убрать препарат?
      /// 
      /// Locales: ru
      static let drug_edit_delete_title = Rswift.StringResource(key: "drug_edit_delete_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Удалить
      /// 
      /// Locales: ru
      static let delete_med_course_accept_string = Rswift.StringResource(key: "delete_med_course_accept_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Удалить
      /// 
      /// Locales: ru
      static let str_drugedit_delete_button_text = Rswift.StringResource(key: "str_drugedit_delete_button_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Укажите все данные для препарата
      /// 
      /// Locales: ru
      static let drug_edit_fillerror = Rswift.StringResource(key: "drug_edit_fillerror", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Укол
      /// 
      /// Locales: ru
      static let injections_1 = Rswift.StringResource(key: "injections_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Укола
      /// 
      /// Locales: ru
      static let injections_2_4 = Rswift.StringResource(key: "injections_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Уколов
      /// 
      /// Locales: ru
      static let injections_5 = Rswift.StringResource(key: "injections_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Уколы
      /// 
      /// Locales: ru
      static let injections = Rswift.StringResource(key: "injections", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Уколы
      /// 
      /// Locales: ru
      static let shot = Rswift.StringResource(key: "shot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ч. ложки
      /// 
      /// Locales: ru
      static let teaspoon = Rswift.StringResource(key: "teaspoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Четверг
      /// 
      /// Locales: ru
      static let full_thursday = Rswift.StringResource(key: "full_thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Чт
      /// 
      /// Locales: ru
      static let short_thursday = Rswift.StringResource(key: "short_thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Шаг 1 Оценка рисков
      /// 
      /// Locales: ru
      static let risk_section_label = Rswift.StringResource(key: "risk_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Шаг 2 Проверка здоровья
      /// 
      /// Locales: ru
      static let check_health_section_label = Rswift.StringResource(key: "check_health_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Шаг 3 Рекомендации
      /// 
      /// Locales: ru
      static let recommend_section_label = Rswift.StringResource(key: "recommend_section_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: банка
      /// 
      /// Locales: ru
      static let jar_1 = Rswift.StringResource(key: "jar_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: банки
      /// 
      /// Locales: ru
      static let jar_2_4 = Rswift.StringResource(key: "jar_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: банок
      /// 
      /// Locales: ru
      static let jar_5 = Rswift.StringResource(key: "jar_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: впрыск
      /// 
      /// Locales: ru
      static let shot_1 = Rswift.StringResource(key: "shot_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: впрыска
      /// 
      /// Locales: ru
      static let shot_2_4 = Rswift.StringResource(key: "shot_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: впрысков
      /// 
      /// Locales: ru
      static let shot_5 = Rswift.StringResource(key: "shot_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: грамм
      /// 
      /// Locales: ru
      static let gramm_1 = Rswift.StringResource(key: "gramm_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: грамма
      /// 
      /// Locales: ru
      static let gramm_2_4 = Rswift.StringResource(key: "gramm_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: граммов
      /// 
      /// Locales: ru
      static let gramm_5 = Rswift.StringResource(key: "gramm_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: десертная ложка
      /// 
      /// Locales: ru
      static let dessertSpoon_1 = Rswift.StringResource(key: "dessertSpoon_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: десертные ложки
      /// 
      /// Locales: ru
      static let dessertSpoon_2_4 = Rswift.StringResource(key: "dessertSpoon_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: десертных ложек
      /// 
      /// Locales: ru
      static let dessertSpoon_5 = Rswift.StringResource(key: "dessertSpoon_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: до
      /// 
      /// Locales: ru
      static let drug_times_to = Rswift.StringResource(key: "drug_times_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: доз
      /// 
      /// Locales: ru
      static let dose_5 = Rswift.StringResource(key: "dose_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: доза
      /// 
      /// Locales: ru
      static let dose_1 = Rswift.StringResource(key: "dose_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: дозы
      /// 
      /// Locales: ru
      static let dose_2_4 = Rswift.StringResource(key: "dose_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static let item_1 = Rswift.StringResource(key: "item_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static let item_2_4 = Rswift.StringResource(key: "item_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static let item_5 = Rswift.StringResource(key: "item_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: иньекций
      /// 
      /// Locales: ru
      static let inject_2_4 = Rswift.StringResource(key: "inject_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: иньекций
      /// 
      /// Locales: ru
      static let inject_5 = Rswift.StringResource(key: "inject_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: иньекция
      /// 
      /// Locales: ru
      static let inject_1 = Rswift.StringResource(key: "inject_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капель
      /// 
      /// Locales: ru
      static let drop_5 = Rswift.StringResource(key: "drop_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капли
      /// 
      /// Locales: ru
      static let drop_2_4 = Rswift.StringResource(key: "drop_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капля
      /// 
      /// Locales: ru
      static let drop_1 = Rswift.StringResource(key: "drop_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капсул
      /// 
      /// Locales: ru
      static let capsule_5 = Rswift.StringResource(key: "capsule_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капсула
      /// 
      /// Locales: ru
      static let capsule_1 = Rswift.StringResource(key: "capsule_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: капсулы
      /// 
      /// Locales: ru
      static let capsule_2_4 = Rswift.StringResource(key: "capsule_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static let smCubic_1 = Rswift.StringResource(key: "smCubic_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static let smCubic_2_4 = Rswift.StringResource(key: "smCubic_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static let smCubic_5 = Rswift.StringResource(key: "smCubic_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static let mg_1 = Rswift.StringResource(key: "mg_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static let mg_2_4 = Rswift.StringResource(key: "mg_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static let mg_5 = Rswift.StringResource(key: "mg_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static let mgMl_1 = Rswift.StringResource(key: "mgMl_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static let mgMl_2_4 = Rswift.StringResource(key: "mgMl_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static let mgMl_5 = Rswift.StringResource(key: "mgMl_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мерная ложка
      /// 
      /// Locales: ru
      static let measuringSpoon_1 = Rswift.StringResource(key: "measuringSpoon_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мерные ложки
      /// 
      /// Locales: ru
      static let measuringSpoon_2_4 = Rswift.StringResource(key: "measuringSpoon_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мерных ложек
      /// 
      /// Locales: ru
      static let measuringSpoon_5 = Rswift.StringResource(key: "measuringSpoon_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static let mkg_1 = Rswift.StringResource(key: "mkg_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static let mkg_2_4 = Rswift.StringResource(key: "mkg_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static let mkg_5 = Rswift.StringResource(key: "mkg_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static let mkgMl_1 = Rswift.StringResource(key: "mkgMl_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static let mkgMl_2_4 = Rswift.StringResource(key: "mkgMl_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static let mkgMl_5 = Rswift.StringResource(key: "mkgMl_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static let ml_1 = Rswift.StringResource(key: "ml_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static let ml_2_4 = Rswift.StringResource(key: "ml_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static let ml_5 = Rswift.StringResource(key: "ml_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: навеска
      /// 
      /// Locales: ru
      static let hitch_1 = Rswift.StringResource(key: "hitch_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: навески
      /// 
      /// Locales: ru
      static let hitch_2_4 = Rswift.StringResource(key: "hitch_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: навесок
      /// 
      /// Locales: ru
      static let hitch_5 = Rswift.StringResource(key: "hitch_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: порошка
      /// 
      /// Locales: ru
      static let powder_2_4 = Rswift.StringResource(key: "powder_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: порошков
      /// 
      /// Locales: ru
      static let powder_5 = Rswift.StringResource(key: "powder_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: порошок
      /// 
      /// Locales: ru
      static let powder_1 = Rswift.StringResource(key: "powder_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: процент
      /// 
      /// Locales: ru
      static let proc_1 = Rswift.StringResource(key: "proc_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: процента
      /// 
      /// Locales: ru
      static let proc_2_4 = Rswift.StringResource(key: "proc_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: процентов
      /// 
      /// Locales: ru
      static let proc_5 = Rswift.StringResource(key: "proc_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ст. ложка
      /// 
      /// Locales: ru
      static let tablespoon_1 = Rswift.StringResource(key: "tablespoon_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ст. ложкек
      /// 
      /// Locales: ru
      static let tablespoon_5 = Rswift.StringResource(key: "tablespoon_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ст. ложки
      /// 
      /// Locales: ru
      static let tablespoon_2_4 = Rswift.StringResource(key: "tablespoon_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: суппозиториев
      /// 
      /// Locales: ru
      static let suppository_5 = Rswift.StringResource(key: "suppository_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: суппозиторий
      /// 
      /// Locales: ru
      static let suppository_1 = Rswift.StringResource(key: "suppository_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: суппозитория
      /// 
      /// Locales: ru
      static let suppository_2_4 = Rswift.StringResource(key: "suppository_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: таблетка
      /// 
      /// Locales: ru
      static let pill_1 = Rswift.StringResource(key: "pill_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: таблетки
      /// 
      /// Locales: ru
      static let pill_2_4 = Rswift.StringResource(key: "pill_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: таблеток
      /// 
      /// Locales: ru
      static let pill_5 = Rswift.StringResource(key: "pill_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: тюбик
      /// 
      /// Locales: ru
      static let tube_1 = Rswift.StringResource(key: "tube_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: тюбика
      /// 
      /// Locales: ru
      static let tube_2_4 = Rswift.StringResource(key: "tube_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: тюбиков
      /// 
      /// Locales: ru
      static let tube_5 = Rswift.StringResource(key: "tube_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ч. ложка
      /// 
      /// Locales: ru
      static let teaspoon_1 = Rswift.StringResource(key: "teaspoon_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ч. ложкекы
      /// 
      /// Locales: ru
      static let teaspoon_5 = Rswift.StringResource(key: "teaspoon_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: ч. ложки
      /// 
      /// Locales: ru
      static let teaspoon_2_4 = Rswift.StringResource(key: "teaspoon_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: <div class='black_regular_text center'>Если вы уже зарегистрированы <a class='href' href='auth'>нажмите сюда.</a></div>
      /// 
      /// Locales: ru
      static func registration_bottom_string_html(_: Void = ()) -> String {
        return NSLocalizedString("registration_bottom_string_html", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: <div class='black_regular_text'>Я принимаю условия <a class='href' href='license'>лицензионного соглашения</a> и даю согласие на обработку персональных данных.</div>
      /// 
      /// Locales: ru
      static func registration_lic_aggrement_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_lic_aggrement_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: <div class='black_regular_text'>Я соглашаюсь на <a class='href' href='medicine'>медицинское вмешательство</a> во время онлайн-консультаций.</div>
      /// 
      /// Locales: ru
      static func registration_med_aggrement_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_med_aggrement_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: <div class='body'> %@ </div>
      /// 
      /// Locales: ru
      static func drug_details_template(_ value1: String) -> String {
        return String(format: NSLocalizedString("drug_details_template", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Авторизация
      /// 
      /// Locales: ru
      static func auth_name(_: Void = ()) -> String {
        return NSLocalizedString("auth_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ампул
      /// 
      /// Locales: ru
      static func ampoules_5(_: Void = ()) -> String {
        return NSLocalizedString("ampoules_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ампула
      /// 
      /// Locales: ru
      static func ampoules_1(_: Void = ()) -> String {
        return NSLocalizedString("ampoules_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ампулы
      /// 
      /// Locales: ru
      static func ampoules(_: Void = ()) -> String {
        return NSLocalizedString("ampoules", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ампулы
      /// 
      /// Locales: ru
      static func ampoules_2_4(_: Void = ()) -> String {
        return NSLocalizedString("ampoules_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Архив курсов
      /// 
      /// Locales: ru
      static func medicine_course_archive(_: Void = ()) -> String {
        return NSLocalizedString("medicine_course_archive", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Архив мед. данных
      /// 
      /// Locales: ru
      static func archive_section_label(_: Void = ()) -> String {
        return NSLocalizedString("archive_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Банка
      /// 
      /// Locales: ru
      static func jar(_: Void = ()) -> String {
        return NSLocalizedString("jar", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Блокировка запросов (не более 1 за 120 сек), попробуйте позже
      /// 
      /// Locales: ru
      static func oftenCodeRequestError(_: Void = ()) -> String {
        return NSLocalizedString("oftenCodeRequestError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ВОССТАНОВЛЕНИЕ ПАРОЛЯ
      /// 
      /// Locales: ru
      static func restore_password_title_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите ваш новый пароль.
      /// 
      /// Locales: ru
      static func accept_restore_password_description_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_description_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите ваш номер телефона или e-mail.
      /// 
      /// Locales: ru
      static func registration_desc_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_desc_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите ваш номер телефона или e-mail.
      /// 
      /// Locales: ru
      static func restore_password_description_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_description_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите код подтверждения отправленный на %@
      /// 
      /// Locales: ru
      static func pin_desc_string(_ value1: String) -> String {
        return String(format: NSLocalizedString("pin_desc_string", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Введите название
      /// 
      /// Locales: ru
      static func str_drugedit_name_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_name_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите название для нового курса
      /// 
      /// Locales: ru
      static func create_med_course_text_string(_: Void = ()) -> String {
        return NSLocalizedString("create_med_course_text_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Введите новое название для курса.
      /// 
      /// Locales: ru
      static func rename_med_course_text_string(_: Void = ()) -> String {
        return NSLocalizedString("rename_med_course_text_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Войти
      /// 
      /// Locales: ru
      static func enter_button_title_string(_: Void = ()) -> String {
        return NSLocalizedString("enter_button_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Воскресенье
      /// 
      /// Locales: ru
      static func full_sunday(_: Void = ()) -> String {
        return NSLocalizedString("full_sunday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Восстановить пароль
      /// 
      /// Locales: ru
      static func restore_password_restore_button_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_restore_button_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Впрыски
      /// 
      /// Locales: ru
      static func inject(_: Void = ()) -> String {
        return NSLocalizedString("inject", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Врачи и клиники
      /// 
      /// Locales: ru
      static func doctor_clinic_section_label(_: Void = ()) -> String {
        return NSLocalizedString("doctor_clinic_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Время
      /// 
      /// Locales: ru
      static func str_drugedit_times_time_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_times_time_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Время приема
      /// 
      /// Locales: ru
      static func str_drugedit_times(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_times", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Время приема
      /// 
      /// Locales: ru
      static func time_of_reception(_: Void = ()) -> String {
        return NSLocalizedString("time_of_reception", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вс
      /// 
      /// Locales: ru
      static func short_sunday(_: Void = ()) -> String {
        return NSLocalizedString("short_sunday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вт
      /// 
      /// Locales: ru
      static func short_tuesday(_: Void = ()) -> String {
        return NSLocalizedString("short_tuesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вторник
      /// 
      /// Locales: ru
      static func full_tuesday(_: Void = ()) -> String {
        return NSLocalizedString("full_tuesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы ввели неверный код.
      /// 
      /// Locales: ru
      static func pin_error_template_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_error_template_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы ввели неверный код. Осталось попыток: %@.
      /// 
      /// Locales: ru
      static func pin_error_template_count_string(_ value1: String) -> String {
        return String(format: NSLocalizedString("pin_error_template_count_string", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Вы неудачно ввели пароль слишком много раз. Мы отправим вам код для проверки. Выберите способ получения.
      /// 
      /// Locales: ru
      static func method_obataining_description_string(_: Void = ()) -> String {
        return NSLocalizedString("method_obataining_description_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы три раза ввели неверный код подтверждения, чтобы повторить процедуру нажмите"Отправить код повторно"
      /// 
      /// Locales: ru
      static func error_code_desc_string(_: Void = ()) -> String {
        return NSLocalizedString("error_code_desc_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы уверенны что хотите убрать данный препарат из Вашего курса?
      /// 
      /// Locales: ru
      static func drug_edit_delete_message(_: Void = ()) -> String {
        return NSLocalizedString("drug_edit_delete_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы уверены что хотите удалить ваш курс лекарств?
      /// 
      /// Locales: ru
      static func delete_med_course_text_string(_: Void = ()) -> String {
        return NSLocalizedString("delete_med_course_text_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выбирайте специалиста и медицинский центр по разнообразным критериям
      /// 
      /// Locales: ru
      static func doctor_clinic_section_description(_: Void = ()) -> String {
        return NSLocalizedString("doctor_clinic_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выбрать
      /// 
      /// Locales: ru
      static func method_obataining_enter_string(_: Void = ()) -> String {
        return NSLocalizedString("method_obataining_enter_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выбрать
      /// 
      /// Locales: ru
      static func ok_string(_: Void = ()) -> String {
        return NSLocalizedString("ok_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выполняйте рекомендации по своему образу жизни
      /// 
      /// Locales: ru
      static func recommend_section_description(_: Void = ()) -> String {
        return NSLocalizedString("recommend_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Выход
      /// 
      /// Locales: ru
      static func auth_alias(_: Void = ()) -> String {
        return NSLocalizedString("auth_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Город
      /// 
      /// Locales: ru
      static func profile_city_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_city_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Граммы
      /// 
      /// Locales: ru
      static func gramm(_: Void = ()) -> String {
        return NSLocalizedString("gramm", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дата
      /// 
      /// Locales: ru
      static func drug_times_todate(_: Void = ()) -> String {
        return NSLocalizedString("drug_times_todate", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дата рождения
      /// 
      /// Locales: ru
      static func profile_date_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_date_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: День
      /// 
      /// Locales: ru
      static func days1(_: Void = ()) -> String {
        return NSLocalizedString("days1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Десертная ложка
      /// 
      /// Locales: ru
      static func dessertSpoon(_: Void = ()) -> String {
        return NSLocalizedString("dessertSpoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дней
      /// 
      /// Locales: ru
      static func days5(_: Void = ()) -> String {
        return NSLocalizedString("days5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дни
      /// 
      /// Locales: ru
      static func drug_times_days(_: Void = ()) -> String {
        return NSLocalizedString("drug_times_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дни
      /// 
      /// Locales: ru
      static func periodic_days(_: Void = ()) -> String {
        return NSLocalizedString("periodic_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дня
      /// 
      /// Locales: ru
      static func days2_4(_: Void = ()) -> String {
        return NSLocalizedString("days2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить прием
      /// 
      /// Locales: ru
      static func str_drugedit_add_times(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_add_times", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавление препарата
      /// 
      /// Locales: ru
      static func create_drug_title(_: Void = ()) -> String {
        return NSLocalizedString("create_drug_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавляйте приемы лекарств и придерживайтесь графика лечения
      /// 
      /// Locales: ru
      static func course_section_description(_: Void = ()) -> String {
        return NSLocalizedString("course_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавьте курс. Для того, чтобы добавить курс,  нажмите +
      /// 
      /// Locales: ru
      static func med_cource_empty_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("med_cource_empty_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавьте препарат. Для того, чтобы добавить лекарства в курс,  нажмите +
      /// 
      /// Locales: ru
      static func drug_list_empty_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("drug_list_empty_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Доза
      /// 
      /// Locales: ru
      static func dose(_: Void = ()) -> String {
        return NSLocalizedString("dose", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Дозировка
      /// 
      /// Locales: ru
      static func str_drugedit_times_dose_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_times_dose_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ед.ы
      /// 
      /// Locales: ru
      static func item(_: Void = ()) -> String {
        return NSLocalizedString("item", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Единица измерения
      /// 
      /// Locales: ru
      static func str_drugedit_unit_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_unit_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Если вы уже зарегистрированы нажмите сюда.
      /// 
      /// Locales: ru
      static func registration_bottom_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_bottom_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Женский
      /// 
      /// Locales: ru
      static func gender_female(_: Void = ()) -> String {
        return NSLocalizedString("gender_female", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Забыли пароль?
      /// 
      /// Locales: ru
      static func forgot_button_title_string(_: Void = ()) -> String {
        return NSLocalizedString("forgot_button_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Загружайте свою историю болезни, чтобы она всегда была под рукой. Больше никаких потерянных карт и лишних бумажек. Архив поможет врачу поставить точный диагноз гораздо быстрее.
      /// 
      /// Locales: ru
      static func archive_description(_: Void = ()) -> String {
        return NSLocalizedString("archive_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Заполните поля чтобы продолжить работу в приложении.
      /// 
      /// Locales: ru
      static func profile_description_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_description_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Зарегистрироваться
      /// 
      /// Locales: ru
      static func registration_button_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_button_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Имя
      /// 
      /// Locales: ru
      static func profile_name_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_name_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Интервал
      /// 
      /// Locales: ru
      static func periodic_interval(_: Void = ()) -> String {
        return NSLocalizedString("periodic_interval", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Каждый день
      /// 
      /// Locales: ru
      static func full_allday(_: Void = ()) -> String {
        return NSLocalizedString("full_allday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капель
      /// 
      /// Locales: ru
      static func drops_5(_: Void = ()) -> String {
        return NSLocalizedString("drops_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static func drop(_: Void = ()) -> String {
        return NSLocalizedString("drop", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static func drops(_: Void = ()) -> String {
        return NSLocalizedString("drops", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капли
      /// 
      /// Locales: ru
      static func drops_2_4(_: Void = ()) -> String {
        return NSLocalizedString("drops_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капля
      /// 
      /// Locales: ru
      static func drops_1(_: Void = ()) -> String {
        return NSLocalizedString("drops_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капсул
      /// 
      /// Locales: ru
      static func capsules_5(_: Void = ()) -> String {
        return NSLocalizedString("capsules_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капсула
      /// 
      /// Locales: ru
      static func capsules_1(_: Void = ()) -> String {
        return NSLocalizedString("capsules_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static func capsule(_: Void = ()) -> String {
        return NSLocalizedString("capsule", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static func capsules(_: Void = ()) -> String {
        return NSLocalizedString("capsules", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Капсулы
      /// 
      /// Locales: ru
      static func capsules_2_4(_: Void = ()) -> String {
        return NSLocalizedString("capsules_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Конец курса:
      /// 
      /// Locales: ru
      static func course_end(_: Void = ()) -> String {
        return NSLocalizedString("course_end", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static func drug_times_edit_title(_: Void = ()) -> String {
        return NSLocalizedString("drug_times_edit_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static func end_of_the_reception(_: Void = ()) -> String {
        return NSLocalizedString("end_of_the_reception", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Конец приема
      /// 
      /// Locales: ru
      static func str_drugedit_end_use_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_end_use_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Куб. см
      /// 
      /// Locales: ru
      static func smCubic(_: Void = ()) -> String {
        return NSLocalizedString("smCubic", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static func course_section_label(_: Void = ()) -> String {
        return NSLocalizedString("course_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static func medicine_course_alias(_: Void = ()) -> String {
        return NSLocalizedString("medicine_course_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Курсы лекарств
      /// 
      /// Locales: ru
      static func medicine_course_name(_: Void = ()) -> String {
        return NSLocalizedString("medicine_course_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Лекарства
      /// 
      /// Locales: ru
      static func drugs(_: Void = ()) -> String {
        return NSLocalizedString("drugs", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Логин не зарегистрирован
      /// 
      /// Locales: ru
      static func accept_restore_password_loginUnregisterError(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_loginUnregisterError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Логин уже зарегистрирован
      /// 
      /// Locales: ru
      static func profile_alreadyRegisterLoginError(_: Void = ()) -> String {
        return NSLocalizedString("profile_alreadyRegisterLoginError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static func me(_: Void = ()) -> String {
        return NSLocalizedString("me", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static func me_1(_: Void = ()) -> String {
        return NSLocalizedString("me_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static func me_2_4(_: Void = ()) -> String {
        return NSLocalizedString("me_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: МЕ
      /// 
      /// Locales: ru
      static func me_5(_: Void = ()) -> String {
        return NSLocalizedString("me_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мазей
      /// 
      /// Locales: ru
      static func ointment_5(_: Void = ()) -> String {
        return NSLocalizedString("ointment_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мази
      /// 
      /// Locales: ru
      static func ointment_2_4(_: Void = ()) -> String {
        return NSLocalizedString("ointment_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мазь
      /// 
      /// Locales: ru
      static func ointment(_: Void = ()) -> String {
        return NSLocalizedString("ointment", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мазь
      /// 
      /// Locales: ru
      static func ointment_1(_: Void = ()) -> String {
        return NSLocalizedString("ointment_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мг.
      /// 
      /// Locales: ru
      static func mg(_: Void = ()) -> String {
        return NSLocalizedString("mg", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мг/мл
      /// 
      /// Locales: ru
      static func mgMl(_: Void = ()) -> String {
        return NSLocalizedString("mgMl", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мерная ложка
      /// 
      /// Locales: ru
      static func measuringSpoon(_: Void = ()) -> String {
        return NSLocalizedString("measuringSpoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мкг.
      /// 
      /// Locales: ru
      static func mkg(_: Void = ()) -> String {
        return NSLocalizedString("mkg", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мкг/мл
      /// 
      /// Locales: ru
      static func mkgMl(_: Void = ()) -> String {
        return NSLocalizedString("mkgMl", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мл.
      /// 
      /// Locales: ru
      static func ml(_: Void = ()) -> String {
        return NSLocalizedString("ml", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мониторинг
      /// 
      /// Locales: ru
      static func monitoring_section_label(_: Void = ()) -> String {
        return NSLocalizedString("monitoring_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Мужской
      /// 
      /// Locales: ru
      static func gender_male(_: Void = ()) -> String {
        return NSLocalizedString("gender_male", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: НОВЫЙ КУРС
      /// 
      /// Locales: ru
      static func create_med_course_caption_string(_: Void = ()) -> String {
        return NSLocalizedString("create_med_course_caption_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: НОВЫЙ ПАРОЛЬ
      /// 
      /// Locales: ru
      static func accept_restore_password_title_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Навеска
      /// 
      /// Locales: ru
      static func hitch(_: Void = ()) -> String {
        return NSLocalizedString("hitch", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Название курса
      /// 
      /// Locales: ru
      static func create_med_course_nameplaceholder_string(_: Void = ()) -> String {
        return NSLocalizedString("create_med_course_nameplaceholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Название курса
      /// 
      /// Locales: ru
      static func rename_med_course_nameplaceholder_string(_: Void = ()) -> String {
        return NSLocalizedString("rename_med_course_nameplaceholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Настройте любые схемы и курсы лекарственных препаратов, прописанных врачом, и получайте уведомления, чтобы не пропустить прием. Все курсы сохраняются в архиве, и ими можно воспользоваться повторно.
      /// 
      /// Locales: ru
      static func course_description(_: Void = ()) -> String {
        return NSLocalizedString("course_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Начало курса:
      /// 
      /// Locales: ru
      static func course_start(_: Void = ()) -> String {
        return NSLocalizedString("course_start", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Начало приема
      /// 
      /// Locales: ru
      static func beginning_of_the_reception(_: Void = ()) -> String {
        return NSLocalizedString("beginning_of_the_reception", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Начало приема
      /// 
      /// Locales: ru
      static func str_drugedit_begin_use_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_begin_use_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Не выбрано
      /// 
      /// Locales: ru
      static func str_drugedit_period_data_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_period_data_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Не забыть о своем здоровье в ежедневной суете помогут регулярные уведомления (push, смс или e-mail). Они учитывают ваш индивидуальный график обследований и напоминают, что пришло время очередной проверки. Получите подробную информацию, о том, какого специалиста пора посетить и какие анализы сдать именно вам.
      /// 
      /// Locales: ru
      static func notification_description(_: Void = ()) -> String {
        return NSLocalizedString("notification_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Неверный логин
      /// 
      /// Locales: ru
      static func incorrectLoginError(_: Void = ()) -> String {
        return NSLocalizedString("incorrectLoginError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Неверный логин или пароль.
      /// 
      /// Locales: ru
      static func error_credentials_string(_: Void = ()) -> String {
        return NSLocalizedString("error_credentials_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Неверный логин или пароль. Осталось попыток: %@.
      /// 
      /// Locales: ru
      static func error_credentials_count_string(_ value1: String) -> String {
        return String(format: NSLocalizedString("error_credentials_count_string", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Неверный пароль
      /// 
      /// Locales: ru
      static func incorrectPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("incorrectPasswordError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Недопустимое значение поля "Город"
      /// 
      /// Locales: ru
      static func profile_incorrectCityError(_: Void = ()) -> String {
        return NSLocalizedString("profile_incorrectCityError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Недопустимое значение поля "День рождения"
      /// 
      /// Locales: ru
      static func profile_incorrectBirthdayError(_: Void = ()) -> String {
        return NSLocalizedString("profile_incorrectBirthdayError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Недопустимое значение поля "Имя"
      /// 
      /// Locales: ru
      static func profile_incorrectNameError(_: Void = ()) -> String {
        return NSLocalizedString("profile_incorrectNameError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Недопустимое значение поля "Пароль"
      /// 
      /// Locales: ru
      static func profile_incorrectPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("profile_incorrectPasswordError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Недопустимое значение поля "Пол"
      /// 
      /// Locales: ru
      static func profile_incorrectGenderError(_: Void = ()) -> String {
        return NSLocalizedString("profile_incorrectGenderError", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ОШИБКА
      /// 
      /// Locales: ru
      static func error_code_top_string(_: Void = ()) -> String {
        return NSLocalizedString("error_code_top_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обширная база медицинских организаций и специалистов. Рейтинг, отзывы пациентов, график работы и другие критерии помогут вам с выбором. Пройти необходимую диагностику вы можете дома или в офисе, заказав выезд мед.сестры.
      /// 
      /// Locales: ru
      static func doctor_clinic_description(_: Void = ()) -> String {
        return NSLocalizedString("doctor_clinic_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Общие данные
      /// 
      /// Locales: ru
      static func str_drugedit_general_data(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_general_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Оставить
      /// 
      /// Locales: ru
      static func drug_edit_delete_cancel(_: Void = ()) -> String {
        return NSLocalizedString("drug_edit_delete_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отвечайте на вопросы умной анкеты и узнайте свои риски.
      /// 
      /// Locales: ru
      static func risk_section_description(_: Void = ()) -> String {
        return NSLocalizedString("risk_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отмена
      /// 
      /// Locales: ru
      static func back_string(_: Void = ()) -> String {
        return NSLocalizedString("back_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func accept_restore_password_cancel_button_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_cancel_button_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func create_med_course_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("create_med_course_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func delete_med_course_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("delete_med_course_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func profile_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func rename_med_course_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("rename_med_course_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func restore_password_cancel_button_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_cancel_button_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static func error_code_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("error_code_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static func method_obataining_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("method_obataining_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить.
      /// 
      /// Locales: ru
      static func pin_cancel_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_cancel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправить код повторно.
      /// 
      /// Locales: ru
      static func pin_resend_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_resend_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправить повторно.
      /// 
      /// Locales: ru
      static func error_code_accept_string(_: Void = ()) -> String {
        return NSLocalizedString("error_code_accept_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отслеживайте свои медицинские показатели на графике
      /// 
      /// Locales: ru
      static func monitoring_section_description(_: Void = ()) -> String {
        return NSLocalizedString("monitoring_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка получения списка городов.
      /// 
      /// Locales: ru
      static func cities_error_string(_: Void = ()) -> String {
        return NSLocalizedString("cities_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static func accept_restore_password_error_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static func auth_error_string(_: Void = ()) -> String {
        return NSLocalizedString("auth_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static func pin_error_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static func profile_error_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка при выполнении операции.
      /// 
      /// Locales: ru
      static func restore_password_error_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка регистрации. Проверьте все поля.
      /// 
      /// Locales: ru
      static func registration_error_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_error_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПЕРЕИМЕНОВАНИЕ
      /// 
      /// Locales: ru
      static func rename_med_course_caption_string(_: Void = ()) -> String {
        return NSLocalizedString("rename_med_course_caption_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПОДТВЕРЖДЕНИЕ
      /// 
      /// Locales: ru
      static func pin_top_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_top_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ПРОФИЛЬ
      /// 
      /// Locales: ru
      static func profile_header_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_header_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func accept_restore_password_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пароль
      /// 
      /// Locales: ru
      static func password_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("password_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static func drug_periodic_edit_title(_: Void = ()) -> String {
        return NSLocalizedString("drug_periodic_edit_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static func periodic(_: Void = ()) -> String {
        return NSLocalizedString("periodic", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Периодичность
      /// 
      /// Locales: ru
      static func str_drugedit_period_data(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_period_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пин код
      /// 
      /// Locales: ru
      static func pin_code_alias(_: Void = ()) -> String {
        return NSLocalizedString("pin_code_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пин код
      /// 
      /// Locales: ru
      static func pin_code_name(_: Void = ()) -> String {
        return NSLocalizedString("pin_code_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пин код успешно отправлен.
      /// 
      /// Locales: ru
      static func pin_success_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_success_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пн
      /// 
      /// Locales: ru
      static func short_monday(_: Void = ()) -> String {
        return NSLocalizedString("short_monday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: По результатам тестирования вам будет предложен индивидуальный перечень обследований и последовательный график их прохождения. Начните диагностику с самых высоких рисков, постепенно исключая все угрозы. Пройдите обследование полностью, чтобы сделать свою жизнь комфортной и безопасной.
      /// 
      /// Locales: ru
      static func check_health_description(_: Void = ()) -> String {
        return NSLocalizedString("check_health_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повторите пароль
      /// 
      /// Locales: ru
      static func accept_restore_password_repeat_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_repeat_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повторите пароль
      /// 
      /// Locales: ru
      static func password_repeat_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("password_repeat_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Подтвердить
      /// 
      /// Locales: ru
      static func pin_accept_string(_: Void = ()) -> String {
        return NSLocalizedString("pin_accept_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пол
      /// 
      /// Locales: ru
      static func profile_gender_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_gender_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Получайте уведомления о необходимости посетить врача и пройти диагностику
      /// 
      /// Locales: ru
      static func notification_section_description(_: Void = ()) -> String {
        return NSLocalizedString("notification_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Понедельник
      /// 
      /// Locales: ru
      static func full_monday(_: Void = ()) -> String {
        return NSLocalizedString("full_monday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пора принять лекарство!
      /// 
      /// Locales: ru
      static func need_to_accept_a_pill(_: Void = ()) -> String {
        return NSLocalizedString("need_to_accept_a_pill", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Порошок
      /// 
      /// Locales: ru
      static func powder(_: Void = ()) -> String {
        return NSLocalizedString("powder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Прием
      /// 
      /// Locales: ru
      static func usage_1(_: Void = ()) -> String {
        return NSLocalizedString("usage_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Приема
      /// 
      /// Locales: ru
      static func usage_2_4(_: Void = ()) -> String {
        return NSLocalizedString("usage_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Приемов
      /// 
      /// Locales: ru
      static func usage_5(_: Void = ()) -> String {
        return NSLocalizedString("usage_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Приемы
      /// 
      /// Locales: ru
      static func drug_times_usages(_: Void = ()) -> String {
        return NSLocalizedString("drug_times_usages", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Продолжительность приема
      /// 
      /// Locales: ru
      static func str_drugedit_longtime_data(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_longtime_data", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Продолжить
      /// 
      /// Locales: ru
      static func profile_next_string(_: Void = ()) -> String {
        return NSLocalizedString("profile_next_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пройдите простое тестирование, которое выявит потенциальные риски возникновения заболеваний: высокие, средние и низкие.  Анкета составлена ведущими врачами РФ и позволяет оценить вероятность развития самых опасных заболеваний: онкологических, сердечно-сосудистых, заболеваний легких и других.
      /// 
      /// Locales: ru
      static func risk_description(_: Void = ()) -> String {
        return NSLocalizedString("risk_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Проконтролируйте происходящие в организме изменения, наблюдая за динамикой на графике. Вы можете отслеживать любые количественные лабораторные показатели, а также поделиться этой информацией с врачом.
      /// 
      /// Locales: ru
      static func monitoring_description(_: Void = ()) -> String {
        return NSLocalizedString("monitoring_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Проценты
      /// 
      /// Locales: ru
      static func proc(_: Void = ()) -> String {
        return NSLocalizedString("proc", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пт
      /// 
      /// Locales: ru
      static func short_friday(_: Void = ()) -> String {
        return NSLocalizedString("short_friday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Пятница
      /// 
      /// Locales: ru
      static func full_friday(_: Void = ()) -> String {
        return NSLocalizedString("full_friday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: РЕГИСТРАЦИЯ
      /// 
      /// Locales: ru
      static func registration_title_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Рабочий стол
      /// 
      /// Locales: ru
      static func main_alias(_: Void = ()) -> String {
        return NSLocalizedString("main_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Рабочий стол
      /// 
      /// Locales: ru
      static func main_name(_: Void = ()) -> String {
        return NSLocalizedString("main_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 1 день
      /// 
      /// Locales: ru
      static func per_1_day(_: Void = ()) -> String {
        return NSLocalizedString("per_1_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 2 дня
      /// 
      /// Locales: ru
      static func per_2_day(_: Void = ()) -> String {
        return NSLocalizedString("per_2_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 3 дня
      /// 
      /// Locales: ru
      static func per_3_day(_: Void = ()) -> String {
        return NSLocalizedString("per_3_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 4 дня
      /// 
      /// Locales: ru
      static func per_4_day(_: Void = ()) -> String {
        return NSLocalizedString("per_4_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 5 дней
      /// 
      /// Locales: ru
      static func per_5_day(_: Void = ()) -> String {
        return NSLocalizedString("per_5_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 6 дней
      /// 
      /// Locales: ru
      static func per_6_day(_: Void = ()) -> String {
        return NSLocalizedString("per_6_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 7 дней
      /// 
      /// Locales: ru
      static func per_7_day(_: Void = ()) -> String {
        return NSLocalizedString("per_7_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раз в 8 дней
      /// 
      /// Locales: ru
      static func per_8_day(_: Void = ()) -> String {
        return NSLocalizedString("per_8_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Раздел в разработке
      /// 
      /// Locales: ru
      static func section_in_develop(_: Void = ()) -> String {
        return NSLocalizedString("section_in_develop", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Регистрация
      /// 
      /// Locales: ru
      static func registration_button_title_string(_: Void = ()) -> String {
        return NSLocalizedString("registration_button_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Рекомендации
      /// 
      /// Locales: ru
      static func str_drugedit_recomendations(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_recomendations", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Рутина
      /// 
      /// Locales: ru
      static func logo_string(_: Void = ()) -> String {
        return NSLocalizedString("logo_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: СПОСОБ ПОЛУЧЕНИЯ
      /// 
      /// Locales: ru
      static func method_obataining_title_string(_: Void = ()) -> String {
        return NSLocalizedString("method_obataining_title_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сб
      /// 
      /// Locales: ru
      static func short_saturday(_: Void = ()) -> String {
        return NSLocalizedString("short_saturday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Свеча
      /// 
      /// Locales: ru
      static func candles_1(_: Void = ()) -> String {
        return NSLocalizedString("candles_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Свечей
      /// 
      /// Locales: ru
      static func candles_5(_: Void = ()) -> String {
        return NSLocalizedString("candles_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Свечи
      /// 
      /// Locales: ru
      static func candles(_: Void = ()) -> String {
        return NSLocalizedString("candles", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Свечи
      /// 
      /// Locales: ru
      static func candles_2_4(_: Void = ()) -> String {
        return NSLocalizedString("candles_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сироп
      /// 
      /// Locales: ru
      static func syrup(_: Void = ()) -> String {
        return NSLocalizedString("syrup", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сироп
      /// 
      /// Locales: ru
      static func syrup_1(_: Void = ()) -> String {
        return NSLocalizedString("syrup_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сиропа
      /// 
      /// Locales: ru
      static func syrup_2_4(_: Void = ()) -> String {
        return NSLocalizedString("syrup_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сиропов
      /// 
      /// Locales: ru
      static func syrup_5(_: Void = ()) -> String {
        return NSLocalizedString("syrup_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Система напоминаний
      /// 
      /// Locales: ru
      static func notification_section_label(_: Void = ()) -> String {
        return NSLocalizedString("notification_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Следующая попытка ввода пароля через %@ сек.
      /// 
      /// Locales: ru
      static func error_block_login_string(_ value1: String) -> String {
        return String(format: NSLocalizedString("error_block_login_string", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Снизить вероятность развития опасных заболеваний можно, выполняя персональные рекомендации. Они формируются приложением на основе сравнения ваших потенциальных рисков и фактических результатов диагностики. Информация тщательно проверяется квалифицированным врачом.
      /// 
      /// Locales: ru
      static func recommend_description(_: Void = ()) -> String {
        return NSLocalizedString("recommend_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Соблюдайте персональный план обследований
      /// 
      /// Locales: ru
      static func check_health_section_description(_: Void = ()) -> String {
        return NSLocalizedString("check_health_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Создать
      /// 
      /// Locales: ru
      static func create_med_course_accept_string(_: Void = ()) -> String {
        return NSLocalizedString("create_med_course_accept_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сохранить
      /// 
      /// Locales: ru
      static func rename_med_course_accept_string(_: Void = ()) -> String {
        return NSLocalizedString("rename_med_course_accept_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сохранить пароль
      /// 
      /// Locales: ru
      static func accept_restore_password_restore_button_string(_: Void = ()) -> String {
        return NSLocalizedString("accept_restore_password_restore_button_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сохраняйте результаты прошедших обследований и приемов врачей
      /// 
      /// Locales: ru
      static func archive_section_description(_: Void = ()) -> String {
        return NSLocalizedString("archive_section_description", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Спреев
      /// 
      /// Locales: ru
      static func sprays_5(_: Void = ()) -> String {
        return NSLocalizedString("sprays_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Спрей
      /// 
      /// Locales: ru
      static func sprays(_: Void = ()) -> String {
        return NSLocalizedString("sprays", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Спрей
      /// 
      /// Locales: ru
      static func sprays_1(_: Void = ()) -> String {
        return NSLocalizedString("sprays_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Спрея
      /// 
      /// Locales: ru
      static func sprays_2_4(_: Void = ()) -> String {
        return NSLocalizedString("sprays_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ср
      /// 
      /// Locales: ru
      static func short_wednesday(_: Void = ()) -> String {
        return NSLocalizedString("short_wednesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Среда
      /// 
      /// Locales: ru
      static func full_wednesday(_: Void = ()) -> String {
        return NSLocalizedString("full_wednesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ст. ложки
      /// 
      /// Locales: ru
      static func tablespoon(_: Void = ()) -> String {
        return NSLocalizedString("tablespoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Суббота
      /// 
      /// Locales: ru
      static func full_saturday(_: Void = ()) -> String {
        return NSLocalizedString("full_saturday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Суппозитории
      /// 
      /// Locales: ru
      static func suppository(_: Void = ()) -> String {
        return NSLocalizedString("suppository", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Таблетка
      /// 
      /// Locales: ru
      static func pills_1(_: Void = ()) -> String {
        return NSLocalizedString("pills_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static func pill(_: Void = ()) -> String {
        return NSLocalizedString("pill", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static func pills(_: Void = ()) -> String {
        return NSLocalizedString("pills", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Таблетки
      /// 
      /// Locales: ru
      static func pills_2_4(_: Void = ()) -> String {
        return NSLocalizedString("pills_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Таблеток
      /// 
      /// Locales: ru
      static func pills_5(_: Void = ()) -> String {
        return NSLocalizedString("pills_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Текущие курсы
      /// 
      /// Locales: ru
      static func medicine_course_now(_: Void = ()) -> String {
        return NSLocalizedString("medicine_course_now", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Телефон / E-mail
      /// 
      /// Locales: ru
      static func login_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("login_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Телефон / E-mail
      /// 
      /// Locales: ru
      static func restore_password_login_placeholder_string(_: Void = ()) -> String {
        return NSLocalizedString("restore_password_login_placeholder_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Тип
      /// 
      /// Locales: ru
      static func str_drugedit_type_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_type_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Тюбик
      /// 
      /// Locales: ru
      static func tube(_: Void = ()) -> String {
        return NSLocalizedString("tube", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: УДАЛЕНИЕ КУРСА
      /// 
      /// Locales: ru
      static func delete_med_course_caption_string(_: Void = ()) -> String {
        return NSLocalizedString("delete_med_course_caption_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Убрать
      /// 
      /// Locales: ru
      static func drug_edit_delete_confirm(_: Void = ()) -> String {
        return NSLocalizedString("drug_edit_delete_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Убрать препарат?
      /// 
      /// Locales: ru
      static func drug_edit_delete_title(_: Void = ()) -> String {
        return NSLocalizedString("drug_edit_delete_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Удалить
      /// 
      /// Locales: ru
      static func delete_med_course_accept_string(_: Void = ()) -> String {
        return NSLocalizedString("delete_med_course_accept_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Удалить
      /// 
      /// Locales: ru
      static func str_drugedit_delete_button_text(_: Void = ()) -> String {
        return NSLocalizedString("str_drugedit_delete_button_text", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Укажите все данные для препарата
      /// 
      /// Locales: ru
      static func drug_edit_fillerror(_: Void = ()) -> String {
        return NSLocalizedString("drug_edit_fillerror", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Укол
      /// 
      /// Locales: ru
      static func injections_1(_: Void = ()) -> String {
        return NSLocalizedString("injections_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Укола
      /// 
      /// Locales: ru
      static func injections_2_4(_: Void = ()) -> String {
        return NSLocalizedString("injections_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Уколов
      /// 
      /// Locales: ru
      static func injections_5(_: Void = ()) -> String {
        return NSLocalizedString("injections_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Уколы
      /// 
      /// Locales: ru
      static func injections(_: Void = ()) -> String {
        return NSLocalizedString("injections", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Уколы
      /// 
      /// Locales: ru
      static func shot(_: Void = ()) -> String {
        return NSLocalizedString("shot", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ч. ложки
      /// 
      /// Locales: ru
      static func teaspoon(_: Void = ()) -> String {
        return NSLocalizedString("teaspoon", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Четверг
      /// 
      /// Locales: ru
      static func full_thursday(_: Void = ()) -> String {
        return NSLocalizedString("full_thursday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Чт
      /// 
      /// Locales: ru
      static func short_thursday(_: Void = ()) -> String {
        return NSLocalizedString("short_thursday", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Шаг 1 Оценка рисков
      /// 
      /// Locales: ru
      static func risk_section_label(_: Void = ()) -> String {
        return NSLocalizedString("risk_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Шаг 2 Проверка здоровья
      /// 
      /// Locales: ru
      static func check_health_section_label(_: Void = ()) -> String {
        return NSLocalizedString("check_health_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Шаг 3 Рекомендации
      /// 
      /// Locales: ru
      static func recommend_section_label(_: Void = ()) -> String {
        return NSLocalizedString("recommend_section_label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: банка
      /// 
      /// Locales: ru
      static func jar_1(_: Void = ()) -> String {
        return NSLocalizedString("jar_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: банки
      /// 
      /// Locales: ru
      static func jar_2_4(_: Void = ()) -> String {
        return NSLocalizedString("jar_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: банок
      /// 
      /// Locales: ru
      static func jar_5(_: Void = ()) -> String {
        return NSLocalizedString("jar_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: впрыск
      /// 
      /// Locales: ru
      static func shot_1(_: Void = ()) -> String {
        return NSLocalizedString("shot_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: впрыска
      /// 
      /// Locales: ru
      static func shot_2_4(_: Void = ()) -> String {
        return NSLocalizedString("shot_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: впрысков
      /// 
      /// Locales: ru
      static func shot_5(_: Void = ()) -> String {
        return NSLocalizedString("shot_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: грамм
      /// 
      /// Locales: ru
      static func gramm_1(_: Void = ()) -> String {
        return NSLocalizedString("gramm_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: грамма
      /// 
      /// Locales: ru
      static func gramm_2_4(_: Void = ()) -> String {
        return NSLocalizedString("gramm_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: граммов
      /// 
      /// Locales: ru
      static func gramm_5(_: Void = ()) -> String {
        return NSLocalizedString("gramm_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: десертная ложка
      /// 
      /// Locales: ru
      static func dessertSpoon_1(_: Void = ()) -> String {
        return NSLocalizedString("dessertSpoon_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: десертные ложки
      /// 
      /// Locales: ru
      static func dessertSpoon_2_4(_: Void = ()) -> String {
        return NSLocalizedString("dessertSpoon_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: десертных ложек
      /// 
      /// Locales: ru
      static func dessertSpoon_5(_: Void = ()) -> String {
        return NSLocalizedString("dessertSpoon_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: до
      /// 
      /// Locales: ru
      static func drug_times_to(_: Void = ()) -> String {
        return NSLocalizedString("drug_times_to", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: доз
      /// 
      /// Locales: ru
      static func dose_5(_: Void = ()) -> String {
        return NSLocalizedString("dose_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: доза
      /// 
      /// Locales: ru
      static func dose_1(_: Void = ()) -> String {
        return NSLocalizedString("dose_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: дозы
      /// 
      /// Locales: ru
      static func dose_2_4(_: Void = ()) -> String {
        return NSLocalizedString("dose_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static func item_1(_: Void = ()) -> String {
        return NSLocalizedString("item_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static func item_2_4(_: Void = ()) -> String {
        return NSLocalizedString("item_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ед.
      /// 
      /// Locales: ru
      static func item_5(_: Void = ()) -> String {
        return NSLocalizedString("item_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: иньекций
      /// 
      /// Locales: ru
      static func inject_2_4(_: Void = ()) -> String {
        return NSLocalizedString("inject_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: иньекций
      /// 
      /// Locales: ru
      static func inject_5(_: Void = ()) -> String {
        return NSLocalizedString("inject_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: иньекция
      /// 
      /// Locales: ru
      static func inject_1(_: Void = ()) -> String {
        return NSLocalizedString("inject_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капель
      /// 
      /// Locales: ru
      static func drop_5(_: Void = ()) -> String {
        return NSLocalizedString("drop_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капли
      /// 
      /// Locales: ru
      static func drop_2_4(_: Void = ()) -> String {
        return NSLocalizedString("drop_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капля
      /// 
      /// Locales: ru
      static func drop_1(_: Void = ()) -> String {
        return NSLocalizedString("drop_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капсул
      /// 
      /// Locales: ru
      static func capsule_5(_: Void = ()) -> String {
        return NSLocalizedString("capsule_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капсула
      /// 
      /// Locales: ru
      static func capsule_1(_: Void = ()) -> String {
        return NSLocalizedString("capsule_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: капсулы
      /// 
      /// Locales: ru
      static func capsule_2_4(_: Void = ()) -> String {
        return NSLocalizedString("capsule_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static func smCubic_1(_: Void = ()) -> String {
        return NSLocalizedString("smCubic_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static func smCubic_2_4(_: Void = ()) -> String {
        return NSLocalizedString("smCubic_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: куб. см
      /// 
      /// Locales: ru
      static func smCubic_5(_: Void = ()) -> String {
        return NSLocalizedString("smCubic_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static func mg_1(_: Void = ()) -> String {
        return NSLocalizedString("mg_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static func mg_2_4(_: Void = ()) -> String {
        return NSLocalizedString("mg_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг.
      /// 
      /// Locales: ru
      static func mg_5(_: Void = ()) -> String {
        return NSLocalizedString("mg_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static func mgMl_1(_: Void = ()) -> String {
        return NSLocalizedString("mgMl_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static func mgMl_2_4(_: Void = ()) -> String {
        return NSLocalizedString("mgMl_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мг/мл
      /// 
      /// Locales: ru
      static func mgMl_5(_: Void = ()) -> String {
        return NSLocalizedString("mgMl_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мерная ложка
      /// 
      /// Locales: ru
      static func measuringSpoon_1(_: Void = ()) -> String {
        return NSLocalizedString("measuringSpoon_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мерные ложки
      /// 
      /// Locales: ru
      static func measuringSpoon_2_4(_: Void = ()) -> String {
        return NSLocalizedString("measuringSpoon_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мерных ложек
      /// 
      /// Locales: ru
      static func measuringSpoon_5(_: Void = ()) -> String {
        return NSLocalizedString("measuringSpoon_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static func mkg_1(_: Void = ()) -> String {
        return NSLocalizedString("mkg_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static func mkg_2_4(_: Void = ()) -> String {
        return NSLocalizedString("mkg_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг.
      /// 
      /// Locales: ru
      static func mkg_5(_: Void = ()) -> String {
        return NSLocalizedString("mkg_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static func mkgMl_1(_: Void = ()) -> String {
        return NSLocalizedString("mkgMl_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static func mkgMl_2_4(_: Void = ()) -> String {
        return NSLocalizedString("mkgMl_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мкг/мл
      /// 
      /// Locales: ru
      static func mkgMl_5(_: Void = ()) -> String {
        return NSLocalizedString("mkgMl_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static func ml_1(_: Void = ()) -> String {
        return NSLocalizedString("ml_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static func ml_2_4(_: Void = ()) -> String {
        return NSLocalizedString("ml_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: мл.
      /// 
      /// Locales: ru
      static func ml_5(_: Void = ()) -> String {
        return NSLocalizedString("ml_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: навеска
      /// 
      /// Locales: ru
      static func hitch_1(_: Void = ()) -> String {
        return NSLocalizedString("hitch_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: навески
      /// 
      /// Locales: ru
      static func hitch_2_4(_: Void = ()) -> String {
        return NSLocalizedString("hitch_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: навесок
      /// 
      /// Locales: ru
      static func hitch_5(_: Void = ()) -> String {
        return NSLocalizedString("hitch_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: порошка
      /// 
      /// Locales: ru
      static func powder_2_4(_: Void = ()) -> String {
        return NSLocalizedString("powder_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: порошков
      /// 
      /// Locales: ru
      static func powder_5(_: Void = ()) -> String {
        return NSLocalizedString("powder_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: порошок
      /// 
      /// Locales: ru
      static func powder_1(_: Void = ()) -> String {
        return NSLocalizedString("powder_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: процент
      /// 
      /// Locales: ru
      static func proc_1(_: Void = ()) -> String {
        return NSLocalizedString("proc_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: процента
      /// 
      /// Locales: ru
      static func proc_2_4(_: Void = ()) -> String {
        return NSLocalizedString("proc_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: процентов
      /// 
      /// Locales: ru
      static func proc_5(_: Void = ()) -> String {
        return NSLocalizedString("proc_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ст. ложка
      /// 
      /// Locales: ru
      static func tablespoon_1(_: Void = ()) -> String {
        return NSLocalizedString("tablespoon_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ст. ложкек
      /// 
      /// Locales: ru
      static func tablespoon_5(_: Void = ()) -> String {
        return NSLocalizedString("tablespoon_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ст. ложки
      /// 
      /// Locales: ru
      static func tablespoon_2_4(_: Void = ()) -> String {
        return NSLocalizedString("tablespoon_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: суппозиториев
      /// 
      /// Locales: ru
      static func suppository_5(_: Void = ()) -> String {
        return NSLocalizedString("suppository_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: суппозиторий
      /// 
      /// Locales: ru
      static func suppository_1(_: Void = ()) -> String {
        return NSLocalizedString("suppository_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: суппозитория
      /// 
      /// Locales: ru
      static func suppository_2_4(_: Void = ()) -> String {
        return NSLocalizedString("suppository_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: таблетка
      /// 
      /// Locales: ru
      static func pill_1(_: Void = ()) -> String {
        return NSLocalizedString("pill_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: таблетки
      /// 
      /// Locales: ru
      static func pill_2_4(_: Void = ()) -> String {
        return NSLocalizedString("pill_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: таблеток
      /// 
      /// Locales: ru
      static func pill_5(_: Void = ()) -> String {
        return NSLocalizedString("pill_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: тюбик
      /// 
      /// Locales: ru
      static func tube_1(_: Void = ()) -> String {
        return NSLocalizedString("tube_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: тюбика
      /// 
      /// Locales: ru
      static func tube_2_4(_: Void = ()) -> String {
        return NSLocalizedString("tube_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: тюбиков
      /// 
      /// Locales: ru
      static func tube_5(_: Void = ()) -> String {
        return NSLocalizedString("tube_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ч. ложка
      /// 
      /// Locales: ru
      static func teaspoon_1(_: Void = ()) -> String {
        return NSLocalizedString("teaspoon_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ч. ложкекы
      /// 
      /// Locales: ru
      static func teaspoon_5(_: Void = ()) -> String {
        return NSLocalizedString("teaspoon_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: ч. ложки
      /// 
      /// Locales: ru
      static func teaspoon_2_4(_: Void = ()) -> String {
        return NSLocalizedString("teaspoon_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DrugCell.validate()
      try _MedicineCourseCell.validate()
    }
    
    struct _DrugCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DrugCell
      
      let bundle = R.hostingBundle
      let identifier = "DrugCell"
      let name = "DrugCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrugCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrugCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "capsules", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'capsules' is used in nib 'DrugCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "path_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'path_arrow' is used in nib 'DrugCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MedicineCourseCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MedicineCourseCell
      
      let bundle = R.hostingBundle
      let identifier = "MedicineCourseCell"
      let name = "MedicineCourseCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MedicineCourseCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MedicineCourseCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "close_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close_icon' is used in nib 'MedicineCourseCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit_icon' is used in nib 'MedicineCourseCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuModuleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MenuModuleCell
      
      let bundle = R.hostingBundle
      let identifier = "MenuModuleCell"
      let name = "MenuModuleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuModuleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuModuleCell
      }
      
      fileprivate init() {}
    }
    
    struct _StandartPagePicker: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StandartPagePicker"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePicker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePicker
      }
      
      fileprivate init() {}
    }
    
    struct _StandartPagePickerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = StandartPagePickerCell
      
      let bundle = R.hostingBundle
      let identifier = "StandartPagePickerCell"
      let name = "StandartPagePickerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePickerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePickerCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try acceptRestorePassword.validate()
      try animateLaunchScreenViewController.validate()
      try auth.validate()
      try backgroundViewController.validate()
      try calculatorPopup.validate()
      try confirmDecisionPopup.validate()
      try createMedicineCourse.validate()
      try drugDetails.validate()
      try drugEdit.validate()
      try drugPeriodicEdit.validate()
      try drugTimesEdit.validate()
      try drugsList.validate()
      try errorCode.validate()
      try inputTextPopup.validate()
      try launchScreen.validate()
      try main.validate()
      try medicineCourse.validate()
      try menuModuleViewController.validate()
      try methodObtaining.validate()
      try pinCode.validate()
      try profile.validate()
      try registration.validate()
      try restorePassword.validate()
    }
    
    struct acceptRestorePassword: Rswift.StoryboardResourceType, Rswift.Validatable {
      let acceptRestorePasswordViewController = StoryboardViewControllerResource<AcceptRestorePasswordViewController>(identifier: "AcceptRestorePasswordViewController")
      let bundle = R.hostingBundle
      let name = "AcceptRestorePassword"
      
      func acceptRestorePasswordViewController(_: Void = ()) -> AcceptRestorePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: acceptRestorePasswordViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.acceptRestorePassword().acceptRestorePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'acceptRestorePasswordViewController' could not be loaded from storyboard 'AcceptRestorePassword' as 'AcceptRestorePasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct animateLaunchScreenViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let animateLaunchScreenViewController = StoryboardViewControllerResource<AnimateLaunchScreenViewController>(identifier: "AnimateLaunchScreenViewController")
      let bundle = R.hostingBundle
      let name = "AnimateLaunchScreenViewController"
      
      func animateLaunchScreenViewController(_: Void = ()) -> AnimateLaunchScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: animateLaunchScreenViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.animateLaunchScreenViewController().animateLaunchScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'animateLaunchScreenViewController' could not be loaded from storyboard 'AnimateLaunchScreenViewController' as 'AnimateLaunchScreenViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authViewController = StoryboardViewControllerResource<AuthViewController>(identifier: "AuthViewController")
      let bundle = R.hostingBundle
      let name = "Auth"
      
      func authViewController(_: Void = ()) -> AuthViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.auth().authViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authViewController' could not be loaded from storyboard 'Auth' as 'AuthViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct backgroundViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BackgroundViewController
      
      let backgroundViewController = StoryboardViewControllerResource<BackgroundViewController>(identifier: "BackgroundViewController")
      let bundle = R.hostingBundle
      let name = "BackgroundViewController"
      
      func backgroundViewController(_: Void = ()) -> BackgroundViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: backgroundViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.backgroundViewController().backgroundViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'backgroundViewController' could not be loaded from storyboard 'BackgroundViewController' as 'BackgroundViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct calculatorPopup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let calculatorPopup = StoryboardViewControllerResource<CalculatorPopup>(identifier: "CalculatorPopup")
      let name = "CalculatorPopup"
      
      func calculatorPopup(_: Void = ()) -> CalculatorPopup? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: calculatorPopup)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.calculatorPopup().calculatorPopup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'calculatorPopup' could not be loaded from storyboard 'CalculatorPopup' as 'CalculatorPopup'.") }
      }
      
      fileprivate init() {}
    }
    
    struct confirmDecisionPopup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let confirmDecisionPopup = StoryboardViewControllerResource<ConfirmDecisionPopup>(identifier: "ConfirmDecisionPopup")
      let name = "ConfirmDecisionPopup"
      
      func confirmDecisionPopup(_: Void = ()) -> ConfirmDecisionPopup? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmDecisionPopup)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.confirmDecisionPopup().confirmDecisionPopup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmDecisionPopup' could not be loaded from storyboard 'ConfirmDecisionPopup' as 'ConfirmDecisionPopup'.") }
      }
      
      fileprivate init() {}
    }
    
    struct createMedicineCourse: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createMedicineCourseViewController = StoryboardViewControllerResource<CreateMedicineCourseViewController>(identifier: "CreateMedicineCourseViewController")
      let name = "CreateMedicineCourse"
      
      func createMedicineCourseViewController(_: Void = ()) -> CreateMedicineCourseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createMedicineCourseViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.createMedicineCourse().createMedicineCourseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createMedicineCourseViewController' could not be loaded from storyboard 'CreateMedicineCourse' as 'CreateMedicineCourseViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct drugDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let drugDetailsViewController = StoryboardViewControllerResource<DrugDetailsViewController>(identifier: "DrugDetailsViewController")
      let name = "DrugDetails"
      
      func drugDetailsViewController(_: Void = ()) -> DrugDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drugDetailsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.drugDetails().drugDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drugDetailsViewController' could not be loaded from storyboard 'DrugDetails' as 'DrugDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct drugEdit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let drugEditViewController = StoryboardViewControllerResource<DrugEditViewController>(identifier: "DrugEditViewController")
      let name = "DrugEdit"
      
      func drugEditViewController(_: Void = ()) -> DrugEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drugEditViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.drugEdit().drugEditViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drugEditViewController' could not be loaded from storyboard 'DrugEdit' as 'DrugEditViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct drugPeriodicEdit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let drugPeriodicEdit = StoryboardViewControllerResource<DrugPeriodicEditViewController>(identifier: "DrugPeriodicEdit")
      let name = "DrugPeriodicEdit"
      
      func drugPeriodicEdit(_: Void = ()) -> DrugPeriodicEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drugPeriodicEdit)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.drugPeriodicEdit().drugPeriodicEdit() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drugPeriodicEdit' could not be loaded from storyboard 'DrugPeriodicEdit' as 'DrugPeriodicEditViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct drugTimesEdit: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let drugTimesEdit = StoryboardViewControllerResource<DrugTimesEditViewController>(identifier: "DrugTimesEdit")
      let name = "DrugTimesEdit"
      
      func drugTimesEdit(_: Void = ()) -> DrugTimesEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drugTimesEdit)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.drugTimesEdit().drugTimesEdit() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drugTimesEdit' could not be loaded from storyboard 'DrugTimesEdit' as 'DrugTimesEditViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct drugsList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let drugsListViewController = StoryboardViewControllerResource<DrugsListViewController>(identifier: "DrugsListViewController")
      let name = "DrugsList"
      
      func drugsListViewController(_: Void = ()) -> DrugsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drugsListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.drugsList().drugsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drugsListViewController' could not be loaded from storyboard 'DrugsList' as 'DrugsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct errorCode: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let errorCodeViewController = StoryboardViewControllerResource<ErrorCodeViewController>(identifier: "ErrorCodeViewController")
      let name = "ErrorCode"
      
      func errorCodeViewController(_: Void = ()) -> ErrorCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: errorCodeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.errorCode().errorCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'errorCodeViewController' could not be loaded from storyboard 'ErrorCode' as 'ErrorCodeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct inputTextPopup: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let inputTextPopup = StoryboardViewControllerResource<InputTextPopup>(identifier: "InputTextPopup")
      let name = "InputTextPopup"
      
      func inputTextPopup(_: Void = ()) -> InputTextPopup? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputTextPopup)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.inputTextPopup().inputTextPopup() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputTextPopup' could not be loaded from storyboard 'InputTextPopup' as 'InputTextPopup'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct medicineCourse: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let medicineCourseViewController = StoryboardViewControllerResource<MedicineCourseViewController>(identifier: "MedicineCourseViewController")
      let name = "MedicineCourse"
      
      func medicineCourseViewController(_: Void = ()) -> MedicineCourseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: medicineCourseViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.medicineCourse().medicineCourseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'medicineCourseViewController' could not be loaded from storyboard 'MedicineCourse' as 'MedicineCourseViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menuModuleViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuModuleViewController = StoryboardViewControllerResource<MenuModuleViewController>(identifier: "MenuModuleViewController")
      let name = "MenuModuleViewController"
      
      func menuModuleViewController(_: Void = ()) -> MenuModuleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuModuleViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.menuModuleViewController().menuModuleViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuModuleViewController' could not be loaded from storyboard 'MenuModuleViewController' as 'MenuModuleViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct methodObtaining: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let methodObtainingViewController = StoryboardViewControllerResource<MethodObtainingViewController>(identifier: "MethodObtainingViewController")
      let name = "MethodObtaining"
      
      func methodObtainingViewController(_: Void = ()) -> MethodObtainingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: methodObtainingViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.methodObtaining().methodObtainingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'methodObtainingViewController' could not be loaded from storyboard 'MethodObtaining' as 'MethodObtainingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct pinCode: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PinCode"
      let pinCodeViewController = StoryboardViewControllerResource<PinCodeViewController>(identifier: "PinCodeViewController")
      
      func pinCodeViewController(_: Void = ()) -> PinCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pinCodeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.pinCode().pinCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pinCodeViewController' could not be loaded from storyboard 'PinCode' as 'PinCodeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registration: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Registration"
      let registrationViewController = StoryboardViewControllerResource<RegistrationViewController>(identifier: "RegistrationViewController")
      
      func registrationViewController(_: Void = ()) -> RegistrationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registrationViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.registration().registrationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registrationViewController' could not be loaded from storyboard 'Registration' as 'RegistrationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct restorePassword: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RestorePassword"
      let restorePasswordViewController = StoryboardViewControllerResource<RestorePasswordViewController>(identifier: "RestorePasswordViewController")
      
      func restorePasswordViewController(_: Void = ()) -> RestorePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restorePasswordViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.restorePassword().restorePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restorePasswordViewController' could not be loaded from storyboard 'RestorePassword' as 'RestorePasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
