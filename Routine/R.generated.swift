//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Foros-Bold`.
    static let forosBold = Rswift.FontResource(fontName: "Foros-Bold")
    /// Font `Foros-Medium`.
    static let forosMedium = Rswift.FontResource(fontName: "Foros-Medium")
    /// Font `Foros-Regular`.
    static let forosRegular = Rswift.FontResource(fontName: "Foros-Regular")
    
    /// `UIFont(name: "Foros-Bold", size: ...)`
    static func forosBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosBold, size: size)
    }
    
    /// `UIFont(name: "Foros-Medium", size: ...)`
    static func forosMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosMedium, size: size)
    }
    
    /// `UIFont(name: "Foros-Regular", size: ...)`
    static func forosRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: forosRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.forosBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Bold' could not be loaded, is 'Foros-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.forosMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Medium' could not be loaded, is 'Foros-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.forosRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Foros-Regular' could not be loaded, is 'Foros-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 44 images.
  struct image {
    /// Image `agree_icon`.
    static let agree_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "agree_icon")
    /// Image `ampoules`.
    static let ampoules = Rswift.ImageResource(bundle: R.hostingBundle, name: "ampoules")
    /// Image `archive_icon`.
    static let archive_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "archive_icon")
    /// Image `arrow_icon`.
    static let arrow_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_icon")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `candles`.
    static let candles = Rswift.ImageResource(bundle: R.hostingBundle, name: "candles")
    /// Image `capsules`.
    static let capsules = Rswift.ImageResource(bundle: R.hostingBundle, name: "capsules")
    /// Image `checkbox_icon`.
    static let checkbox_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_icon")
    /// Image `checkbox_pressed_icon`.
    static let checkbox_pressed_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_pressed_icon")
    /// Image `close_icon`.
    static let close_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_icon")
    /// Image `delete_drug_icon`.
    static let delete_drug_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_drug_icon")
    /// Image `doctor_clinic_icon`.
    static let doctor_clinic_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "doctor_clinic_icon")
    /// Image `drops`.
    static let drops = Rswift.ImageResource(bundle: R.hostingBundle, name: "drops")
    /// Image `drugs_icon`.
    static let drugs_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drugs_icon")
    /// Image `edit_icon`.
    static let edit_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_icon")
    /// Image `edit_nav_icon`.
    static let edit_nav_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_nav_icon")
    /// Image `eye_icon`.
    static let eye_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_icon")
    /// Image `eye_open_icon`.
    static let eye_open_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_open_icon")
    /// Image `icon_add_times`.
    static let icon_add_times = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add_times")
    /// Image `info_icon`.
    static let info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_icon")
    /// Image `injections`.
    static let injections = Rswift.ImageResource(bundle: R.hostingBundle, name: "injections")
    /// Image `logo_icon_ru`.
    static let logo_icon_ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_icon_ru")
    /// Image `logo_splash_ru`.
    static let logo_splash_ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_splash_ru")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mark`.
    static let mark = Rswift.ImageResource(bundle: R.hostingBundle, name: "mark")
    /// Image `menu_icon`.
    static let menu_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_icon")
    /// Image `monitoring_icon`.
    static let monitoring_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "monitoring_icon")
    /// Image `notification_icon`.
    static let notification_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_icon")
    /// Image `ointment`.
    static let ointment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ointment")
    /// Image `ok_icon`.
    static let ok_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ok_icon")
    /// Image `pass_no_icon`.
    static let pass_no_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_no_icon")
    /// Image `pass_ok_icon`.
    static let pass_ok_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_ok_icon")
    /// Image `path_arrow`.
    static let path_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "path_arrow")
    /// Image `percent_icon`.
    static let percent_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "percent_icon")
    /// Image `pills`.
    static let pills = Rswift.ImageResource(bundle: R.hostingBundle, name: "pills")
    /// Image `plus_icon`.
    static let plus_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_icon")
    /// Image `powder`.
    static let powder = Rswift.ImageResource(bundle: R.hostingBundle, name: "powder")
    /// Image `question_icon`.
    static let question_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "question_icon")
    /// Image `sprays`.
    static let sprays = Rswift.ImageResource(bundle: R.hostingBundle, name: "sprays")
    /// Image `syrup`.
    static let syrup = Rswift.ImageResource(bundle: R.hostingBundle, name: "syrup")
    /// Image `triangle_to_bottom`.
    static let triangle_to_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle_to_bottom")
    /// Image `triangle_to_right`.
    static let triangle_to_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle_to_right")
    /// Image `warn_icon`.
    static let warn_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "warn_icon")
    /// Image `white_close_icon`.
    static let white_close_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_close_icon")
    
    /// `UIImage(named: "agree_icon", bundle: ..., traitCollection: ...)`
    static func agree_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.agree_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ampoules", bundle: ..., traitCollection: ...)`
    static func ampoules(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ampoules, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "archive_icon", bundle: ..., traitCollection: ...)`
    static func archive_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archive_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_icon", bundle: ..., traitCollection: ...)`
    static func arrow_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "candles", bundle: ..., traitCollection: ...)`
    static func candles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.candles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "capsules", bundle: ..., traitCollection: ...)`
    static func capsules(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.capsules, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_icon", bundle: ..., traitCollection: ...)`
    static func checkbox_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox_pressed_icon", bundle: ..., traitCollection: ...)`
    static func checkbox_pressed_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_pressed_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close_icon", bundle: ..., traitCollection: ...)`
    static func close_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delete_drug_icon", bundle: ..., traitCollection: ...)`
    static func delete_drug_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_drug_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "doctor_clinic_icon", bundle: ..., traitCollection: ...)`
    static func doctor_clinic_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doctor_clinic_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drops", bundle: ..., traitCollection: ...)`
    static func drops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drops, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "drugs_icon", bundle: ..., traitCollection: ...)`
    static func drugs_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drugs_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_icon", bundle: ..., traitCollection: ...)`
    static func edit_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit_nav_icon", bundle: ..., traitCollection: ...)`
    static func edit_nav_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_nav_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_icon", bundle: ..., traitCollection: ...)`
    static func eye_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eye_open_icon", bundle: ..., traitCollection: ...)`
    static func eye_open_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_open_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_add_times", bundle: ..., traitCollection: ...)`
    static func icon_add_times(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_add_times, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info_icon", bundle: ..., traitCollection: ...)`
    static func info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "injections", bundle: ..., traitCollection: ...)`
    static func injections(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.injections, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_icon_ru", bundle: ..., traitCollection: ...)`
    static func logo_icon_ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_icon_ru, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_splash_ru", bundle: ..., traitCollection: ...)`
    static func logo_splash_ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_splash_ru, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mark", bundle: ..., traitCollection: ...)`
    static func mark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_icon", bundle: ..., traitCollection: ...)`
    static func menu_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "monitoring_icon", bundle: ..., traitCollection: ...)`
    static func monitoring_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.monitoring_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification_icon", bundle: ..., traitCollection: ...)`
    static func notification_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ointment", bundle: ..., traitCollection: ...)`
    static func ointment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ointment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ok_icon", bundle: ..., traitCollection: ...)`
    static func ok_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ok_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_no_icon", bundle: ..., traitCollection: ...)`
    static func pass_no_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_no_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_ok_icon", bundle: ..., traitCollection: ...)`
    static func pass_ok_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_ok_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "path_arrow", bundle: ..., traitCollection: ...)`
    static func path_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "percent_icon", bundle: ..., traitCollection: ...)`
    static func percent_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.percent_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pills", bundle: ..., traitCollection: ...)`
    static func pills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pills, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus_icon", bundle: ..., traitCollection: ...)`
    static func plus_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "powder", bundle: ..., traitCollection: ...)`
    static func powder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.powder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "question_icon", bundle: ..., traitCollection: ...)`
    static func question_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.question_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sprays", bundle: ..., traitCollection: ...)`
    static func sprays(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sprays, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "syrup", bundle: ..., traitCollection: ...)`
    static func syrup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.syrup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle_to_bottom", bundle: ..., traitCollection: ...)`
    static func triangle_to_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle_to_bottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle_to_right", bundle: ..., traitCollection: ...)`
    static func triangle_to_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle_to_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "warn_icon", bundle: ..., traitCollection: ...)`
    static func warn_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warn_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "white_close_icon", bundle: ..., traitCollection: ...)`
    static func white_close_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_close_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `StandartPagePickerCell`.
    static let standartPagePickerCell = _R.nib._StandartPagePickerCell()
    
    /// `UINib(name: "StandartPagePickerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.standartPagePickerCell) instead")
    static func standartPagePickerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.standartPagePickerCell)
    }
    
    static func standartPagePickerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePickerCell? {
      return R.nib.standartPagePickerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePickerCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `StandartPagePickerCell`.
    static let standartPagePickerCell: Rswift.ReuseIdentifier<StandartPagePickerCell> = Rswift.ReuseIdentifier(identifier: "StandartPagePickerCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MenuViewController`.
    static let menuViewController = _R.storyboard.menuViewController()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MenuViewController", bundle: ...)`
    static func menuViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 33 localization keys.
    struct localizable {
      /// en translation: count_days
      /// 
      /// Locales: en, ru
      static let count_days = Rswift.StringResource(key: "count_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: count_usage_days
      /// 
      /// Locales: en, ru
      static let count_usage_days = Rswift.StringResource(key: "count_usage_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: count_usage_number
      /// 
      /// Locales: en, ru
      static let count_usage_number = Rswift.StringResource(key: "count_usage_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: days2_4
      /// 
      /// Locales: en, ru
      static let days2_4 = Rswift.StringResource(key: "days2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: days5
      /// 
      /// Locales: en, ru
      static let days5 = Rswift.StringResource(key: "days5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: days_1
      /// 
      /// Locales: en, ru
      static let days_1 = Rswift.StringResource(key: "days_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: end_usage_date
      /// 
      /// Locales: en, ru
      static let end_usage_date = Rswift.StringResource(key: "end_usage_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: end_usage_date_to
      /// 
      /// Locales: en, ru
      static let end_usage_date_to = Rswift.StringResource(key: "end_usage_date_to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: usage_1
      /// 
      /// Locales: en, ru
      static let usage_1 = Rswift.StringResource(key: "usage_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: usage_2_4
      /// 
      /// Locales: en, ru
      static let usage_2_4 = Rswift.StringResource(key: "usage_2_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: usage_5
      /// 
      /// Locales: en, ru
      static let usage_5 = Rswift.StringResource(key: "usage_5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: week_days
      /// 
      /// Locales: en, ru
      static let week_days = Rswift.StringResource(key: "week_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Воскресенье
      /// 
      /// Locales: en, ru
      static let full_sunday = Rswift.StringResource(key: "full_sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Вс
      /// 
      /// Locales: en, ru
      static let short_sunday = Rswift.StringResource(key: "short_sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Вт
      /// 
      /// Locales: en, ru
      static let short_tuesday = Rswift.StringResource(key: "short_tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Вторник
      /// 
      /// Locales: en, ru
      static let full_tuesday = Rswift.StringResource(key: "full_tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Каждый день
      /// 
      /// Locales: en, ru
      static let full_allday = Rswift.StringResource(key: "full_allday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Меню
      /// 
      /// Locales: en, ru
      static let menu_alias = Rswift.StringResource(key: "menu_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Меню
      /// 
      /// Locales: en, ru
      static let menu_name = Rswift.StringResource(key: "menu_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Ошибка соединения!
      /// 
      /// Locales: en, ru
      static let error_network = Rswift.StringResource(key: "error_network", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Пн
      /// 
      /// Locales: en, ru
      static let short_monday = Rswift.StringResource(key: "short_monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Понедельник
      /// 
      /// Locales: en, ru
      static let full_monday = Rswift.StringResource(key: "full_monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Пт
      /// 
      /// Locales: en, ru
      static let short_friday = Rswift.StringResource(key: "short_friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Пятница
      /// 
      /// Locales: en, ru
      static let full_friday = Rswift.StringResource(key: "full_friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Рабочий стол
      /// 
      /// Locales: en, ru
      static let main_alias = Rswift.StringResource(key: "main_alias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Рабочий стол
      /// 
      /// Locales: en, ru
      static let main_name = Rswift.StringResource(key: "main_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Рутина
      /// 
      /// Locales: en, ru
      static let logo_string = Rswift.StringResource(key: "logo_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Сб
      /// 
      /// Locales: en, ru
      static let short_saturday = Rswift.StringResource(key: "short_saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Ср
      /// 
      /// Locales: en, ru
      static let short_wednesday = Rswift.StringResource(key: "short_wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Среда
      /// 
      /// Locales: en, ru
      static let full_wednesday = Rswift.StringResource(key: "full_wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Суббота
      /// 
      /// Locales: en, ru
      static let full_saturday = Rswift.StringResource(key: "full_saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Четверг
      /// 
      /// Locales: en, ru
      static let full_thursday = Rswift.StringResource(key: "full_thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Чт
      /// 
      /// Locales: en, ru
      static let short_thursday = Rswift.StringResource(key: "short_thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      
      /// en translation: count_days
      /// 
      /// Locales: en, ru
      static func count_days(_: Void = ()) -> String {
        return NSLocalizedString("count_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: count_usage_days
      /// 
      /// Locales: en, ru
      static func count_usage_days(_: Void = ()) -> String {
        return NSLocalizedString("count_usage_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: count_usage_number
      /// 
      /// Locales: en, ru
      static func count_usage_number(_: Void = ()) -> String {
        return NSLocalizedString("count_usage_number", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: days2_4
      /// 
      /// Locales: en, ru
      static func days2_4(_: Void = ()) -> String {
        return NSLocalizedString("days2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: days5
      /// 
      /// Locales: en, ru
      static func days5(_: Void = ()) -> String {
        return NSLocalizedString("days5", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: days_1
      /// 
      /// Locales: en, ru
      static func days_1(_: Void = ()) -> String {
        return NSLocalizedString("days_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: end_usage_date
      /// 
      /// Locales: en, ru
      static func end_usage_date(_: Void = ()) -> String {
        return NSLocalizedString("end_usage_date", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: end_usage_date_to
      /// 
      /// Locales: en, ru
      static func end_usage_date_to(_: Void = ()) -> String {
        return NSLocalizedString("end_usage_date_to", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: usage_1
      /// 
      /// Locales: en, ru
      static func usage_1(_: Void = ()) -> String {
        return NSLocalizedString("usage_1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: usage_2_4
      /// 
      /// Locales: en, ru
      static func usage_2_4(_: Void = ()) -> String {
        return NSLocalizedString("usage_2_4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: usage_5
      /// 
      /// Locales: en, ru
      static func usage_5(_: Void = ()) -> String {
        return NSLocalizedString("usage_5", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: week_days
      /// 
      /// Locales: en, ru
      static func week_days(_: Void = ()) -> String {
        return NSLocalizedString("week_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Воскресенье
      /// 
      /// Locales: en, ru
      static func full_sunday(_: Void = ()) -> String {
        return NSLocalizedString("full_sunday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Вс
      /// 
      /// Locales: en, ru
      static func short_sunday(_: Void = ()) -> String {
        return NSLocalizedString("short_sunday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Вт
      /// 
      /// Locales: en, ru
      static func short_tuesday(_: Void = ()) -> String {
        return NSLocalizedString("short_tuesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Вторник
      /// 
      /// Locales: en, ru
      static func full_tuesday(_: Void = ()) -> String {
        return NSLocalizedString("full_tuesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Каждый день
      /// 
      /// Locales: en, ru
      static func full_allday(_: Void = ()) -> String {
        return NSLocalizedString("full_allday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Меню
      /// 
      /// Locales: en, ru
      static func menu_alias(_: Void = ()) -> String {
        return NSLocalizedString("menu_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Меню
      /// 
      /// Locales: en, ru
      static func menu_name(_: Void = ()) -> String {
        return NSLocalizedString("menu_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ошибка соединения!
      /// 
      /// Locales: en, ru
      static func error_network(_: Void = ()) -> String {
        return NSLocalizedString("error_network", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Пн
      /// 
      /// Locales: en, ru
      static func short_monday(_: Void = ()) -> String {
        return NSLocalizedString("short_monday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Понедельник
      /// 
      /// Locales: en, ru
      static func full_monday(_: Void = ()) -> String {
        return NSLocalizedString("full_monday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Пт
      /// 
      /// Locales: en, ru
      static func short_friday(_: Void = ()) -> String {
        return NSLocalizedString("short_friday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Пятница
      /// 
      /// Locales: en, ru
      static func full_friday(_: Void = ()) -> String {
        return NSLocalizedString("full_friday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Рабочий стол
      /// 
      /// Locales: en, ru
      static func main_alias(_: Void = ()) -> String {
        return NSLocalizedString("main_alias", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Рабочий стол
      /// 
      /// Locales: en, ru
      static func main_name(_: Void = ()) -> String {
        return NSLocalizedString("main_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Рутина
      /// 
      /// Locales: en, ru
      static func logo_string(_: Void = ()) -> String {
        return NSLocalizedString("logo_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Сб
      /// 
      /// Locales: en, ru
      static func short_saturday(_: Void = ()) -> String {
        return NSLocalizedString("short_saturday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ср
      /// 
      /// Locales: en, ru
      static func short_wednesday(_: Void = ()) -> String {
        return NSLocalizedString("short_wednesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Среда
      /// 
      /// Locales: en, ru
      static func full_wednesday(_: Void = ()) -> String {
        return NSLocalizedString("full_wednesday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Суббота
      /// 
      /// Locales: en, ru
      static func full_saturday(_: Void = ()) -> String {
        return NSLocalizedString("full_saturday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Четверг
      /// 
      /// Locales: en, ru
      static func full_thursday(_: Void = ()) -> String {
        return NSLocalizedString("full_thursday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Чт
      /// 
      /// Locales: en, ru
      static func short_thursday(_: Void = ()) -> String {
        return NSLocalizedString("short_thursday", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _StandartPagePickerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = StandartPagePickerCell
      
      let bundle = R.hostingBundle
      let identifier = "StandartPagePickerCell"
      let name = "StandartPagePickerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StandartPagePickerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StandartPagePickerCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
      try menuViewController.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menuViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "MenuViewController"
      
      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.menuViewController().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'MenuViewController' as 'MenuViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
